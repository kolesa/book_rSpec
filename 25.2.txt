25.2  Specifying Business Rules

In his article “Skinny Controller, Fat Model,”2  Jamis Buck recommends pushing business logic down to the model, keeping views and controller actions lean. This guideline helps us to follow the Single Responsibility Principle by keeping controllers and views focused on application logic and keeping the models focused on business logic.


Express Business Rules in Models

Our message app works well for sending unlimited messages, but our customer wants users to sign up for subscriptions that limit the number  of  messages  they  can  send  in  a  month.  We’ll  imagine  that  we’ve already expressed these new requirements in Cucumber scenarios, and we’re ready to start driving out code that will satisfy them.

If  you’ve  been  following  along  since  Chapter  24,  Rails  Controllers,  on page 345, the app has a MessagesController  with a create( ) action that looks like this:

def create
	@message = Message.new(params[:message])
	if @message.save
		flash[:notice] = "The message was saved successfully."
		redirect_to :action => "index"
	else
		render :action => "new"
	end 
end

In  this  design,  the  MessagesController  is  responsible  for  building  and then saving a message. Because we are about to add some complexity to this functionality, now would be a good time to push that responsibility down to the model. We can do that by modifying the create( ) action so that it tells the current_user  to send a message, rather than creating it directly in the action.


2.  http://weblog.jamisbuck.org/2006/10/18/skinny- controller- fat- model
 


We’re not going to make that change now, because we’d need to divert our focus to the controller and its specs, but here’s an example of how it might look if we did make the change now:

# For discussion purposes only
def create
	@message = current_user.send_message(params[:message])
	if @message.new_record?
		flash[:notice] = "The message was saved successfully."
		redirect_to :action => "index"
	else
		render :action => "new"
	end 
end

The  line  that  sends  the  message  not  only  helps push  the  logic  to  the model but is also a much better expression of what’s really going on in the action. We’re not just creating a message; we’re sending one from the current user. This clarity is a small win, but as the code base grows, these little wins make an application much easier to understand and evolve.

Before  we  press  forward,  create  a  User  model  using  the  Rails’  model generator:

script/rails generate model User login:string 
rake db:migrate
rake db:test:prepare

User  models  usually  need  more  than  just  a  login  attribute,  like  pass- words, but we’re not concerned with those aspects of a user right now. Now we’re ready to drive out these new business rules.

Focus on Behavior

When thinking about models, it’s tempting to jump ahead and think of all of the relationships and functionality we just know they’re going to need. Developing models this way can lead to inconsistent APIs with far too many public methods and relationships, which then become hard to maintain.

Focusing on the behavior first leads to clean, cohesive models, so that’s what we’re going to do. Create a spec for the User model, which describes the behavior of send_message.
 


Download rails_models/rules/01/spec/models/user_example1_spec.rb

require 'spec_helper'

describe User do

	describe "#send_message" do
		it "sends a message to another user"
	end

end

The happy path for send_message is that the user has not gone over the monthly limit and will be able to send a message to another user. Let’s move this pending example into a new context( ) to better express this:

Download rails_models/rules/01/spec/models/user_example2_spec.rb

require 'spec_helper'

describe User do

describe "#send_message" do

	context "when the user is under their subscription limit" do 
		it "sends a message to another user"
		end 
	end
end

Now fill in the example with what we expect to happen when one user sends a message to another:

Download rails_models/rules/01/spec/models/user_example3_spec.rb

describe "#send_message" do
	context "when the user is under their subscription limit" do 
		it "sends a 
			message to another user" do
			msg = zach.send_message(		:recipient => david
			)
			david.received_messages.should == [msg]
		end 
	end
end
 


Now  that  we’ve  defined  a  clean  interface  for  sending  messages,  we’ve run the spec, and it fails with undefined local variable or method ’zach’. With  the  expectation  clear,  let’s  supply  the  necessary  setup  for  the example to run, starting with zach and david as local variables:

Download rails_models/rules/01/spec/models/user_example4_spec.rb

describe "#send_message" do
	context "when the user is under their subscription limit" do 
		it "sends a message to another user" do
			zach = User.create!
			david = User.create!
			msg = zach.send_message(
				:recipient => david
			)
			david.received_messages.should == [msg]
		end 
	end
end

Run the spec again, and the example fails with undefined method ’send_message’. Add an emptysend_message( ) method to the User model:

Download rails_models/rules/02/app/models/user.rb

class User < ActiveRecord::Base

	def send_message(message_attrs)
	end

end

The  example  still  fails,  but  now  it’s  because  of  undefined  method ’received_messages’  on  User.  We  need  a  received_messages  association, so add that and run the spec:

Download rails_models/rules/03/app/models/user.rb

class User < ActiveRecord::Base
	has_many :received_messages, :class_name => Message.name,
		:foreign_key => "recipient_id"

	def send_message(message_attrs)
	end

end
 
Now the example fails because it expects david.received_messages() to return [msg] but got [ ] instead. To get this to pass, modify send_message( ) such that it creates a message using the message_attrs parameter. This is :recipient => david in our example.

Download rails_models/rules/04/app/models/user.rb

class User < ActiveRecord::Base
	has_many :received_messages, :class_name => Message.name,
		:foreign_key => "recipient_id"

		def send_message(message_attrs) 	
			Message.create! message_attrs
		end

end

Run  the  spec,  and  it  fails  with  Validation failed: Text can’t be blank, Title can’t  be  blank.  This  is  happening  because  the  Message  validates  the presence of the title and text attributes. Because send_message( ) is just passing the attributes hash to the Message constructor, we can include those attributes directly in the example:

Download rails_models/rules/04/spec/models/user_example1_spec.rb

it "sends a message to another user" do
	zach = User.create!
	david = User.create!
	msg = zach.send_message(
		:title => "Book Update",
		:text => "Beta 11 includes great stuff!",
		:recipient => david
	)
	david.received_messages.should == [msg]
end

Voila! The spec is now passing with 1 example, 0 failures. We’ve added the title  and text  attributes to get the sends a message to another user  example to pass, but what should happen to those attributes? Let’s add an example that specifies that those values make their way to the Message:

Download rails_models/rules/04/spec/models/user_example2_spec.rb

it "creates a new message with the submitted attributes" do
	zach = User.create!
	david = User.create!
	msg = zach.send_message(
		:title => "Book Update",
		:text => "Beta 11 includes great stuff!",
		:recipient => david
	)
	msg.title.should == "Book Update"
	msg.text.should == "Beta 11 includes great stuff!"
end

This passes right away, but that’s OK in this case, because the example communicates a requirement of this method.

Additional Outcomes

At this point, a user can send a message to a recipient, but the sender has no way to review the messages he or she sent. We need to add an expectation that the sender is associated with the message as well as the recipient. Add an example to express that expectation:

Download rails_models/rules/04/spec/models/user_example3_spec.rb

context "when the user is under their subscription limit" do 
it "adds the message to the sender's sent messages"
end

This example is similar to the example we just got passing, so let’s copy its example body into the new example and change the expectation to look at the sender’s sent_messages:

Download rails_models/rules/04/spec/models/user_example4_spec.rb

it "adds the message to the sender's sent messages" do
	zach = User.create!
	david = User.create!
	msg = zach.send_message(
		:title => "Book Update",
		:text => "Beta 11 includes great stuff!",
		:recipient => david
	)
	zach.sent_messages.should == [msg]
end

Running the spec results in the example failing with an undefined method ’sent_messages’. We’ll need to add an association to make this pass. Also,  the  messages  table  doesn’t  have  a  sender_id  field,  so  be  sure  to make a migration that adds it. Here’s what the model should end up looking like:

Download rails_models/rules/05/app/models/user.rb

class User < ActiveRecord::Base
	has_many :received_messages, :class_name => Message.name,
		:foreign_key => "recipient_id"
	has_many :sent_messages, :class_name => Message.name,
		:foreign_key => "sender_id"

	def send_message(message_attrs) 
		Message.create! message_attrs
	end

end
 


Execute the spec, and the example is still failing because it expects an array with one message but found an empty array. Now let’s update the send_message( ) method implementation to use the sent_messages  association to create the message:

Download rails_models/rules/06/app/models/user.rb

class User < ActiveRecord::Base
	has_many :received_messages, :class_name => Message.name,
		:foreign_key => "recipient_id"
	has_many :sent_messages, :class_name => Message.name,
		:foreign_key => "sender_id"

	def send_message(message_attrs)
		sent_messages.create! message_attrs
	end

end

And we’re back to green with 3 examples, 0 failures.

Tidy Up

Now we can safely clean up the duplication between the examples. To start, let’s consolidate the creation of zach and david in one spot. Pull up the assignments of zach and david into a before(:each) block as instance variables:

Download rails_models/rules/06/spec/models/user_example1_spec.rb

describe "#send_message" do
	before(:each) do
	@zach = User.create!
	@david = User.create!
	end

	it "creates a new message with the submitted attributes" do

The  spec  should  still  be  green,  although  we’re  not  using  the  new instance  variables. Update  the  first  example,  creates a new message with the submitted attributes, to rely on the instance variables:

Download rails_models/rules/06/spec/models/user_example2_spec.rb

it "creates a new message with the submitted attributes" do
	msg = @zach.send_message(
		:title => "Book Update",
		:text => "Beta 11 includes great stuff!",
		:recipient => @david
	)
	msg.title.should == "Book Update"
	msg.text.should == "Beta 11 includes great stuff!"
end
 


Run the spec, make sure it’s still green, and then update the other two examples  to  use  the  instance  variables.  When  you’re  done,  the  spec should still be at a green bar, 3 examples, 0 failures.

With specs for the happy path passing with the supporting code implemented,  now  it’s  time  to  start  exploring  the  edge  cases.  We’ll begin with what happens when the user exceeds their subscription’s monthly limit.

Edge Cases

When we tell a User to send a message, a record is created in the messages table. We can use that knowledge to specify what happens when a message is not sent: it should not create a record in the messages table. Let’s express that in a new example in user_spec.rb:

Download rails_models/rules/06/spec/models/user_example3_spec.rb

context "when the user is over their subscription limit" do 
	it "does not create a message" do
		lambda {
			@zach.send_message(
				:title => "Book Update",
				:text => "Beta 11 includes great stuff!",
				:recipient => @david
			)
		}.should_not change(Message, :count)
	end 
end

Run  the  spec,  and  watch  that  new  example  fail  with  count should not have changed, but did. We need to set up the example so the user has already reached their subscription limit. Writing the code we wish we had, we might end up with something like this in send_message( ):

def send_message(message_attrs)
	if subscription.can_send_message?
		sent_messages.create message_attrs
	end 
end

This lets the subscription dictate whether a message can be sent on a user-by-user basis. Run that, and you’ll see four failures with undefined local variable or method ‘subscription’. We have a few different things to do to get this to pass, so let’s back that change out and run the examples again to make sure they’re all passing.

Introduce a before(:each) block inside the context that utilizes a stub to ensure a user can’t send a message:

Download rails_models/rules/06/spec/models/user_example4_spec.rb

context "when the user is over their subscription limit" do
	before(:each) do
		@zach.subscription = Subscription.new
		@zach.subscription.stub(:can_send_message?).and_return false 
	end

	it "does not create a message" do
		lambda {
		@zach.send_message(
		:title => "Book Update",
		:text => "Beta 11 includes great stuff!",
		:recipient => @david
		)
	}.should_not change(Message, :count)
	end 
end

Now  the  latest  example  fails  with  uninitialized  constant  Subscription.  We need a Subscription model and a migration that generates the subscriptions table and a subscription_id on the users table. Go ahead and add all that, run rake db:migrate && rake db:test:prepare, and then the example should fail with an undefined method ’subscription=’ . Now let’s add a Subscription association to the User model:

Download rails_models/rules/08/app/models/user.rb

belongs_to :subscription

The  spec  should  be  back  to  the  original  failure,  count should not have changed, but did. Update send_message to rely on the stubbed can_send_message?( ) method:

Download rails_models/rules/09/app/models/user.rb

def send_message(message_attrs)
	if subscription.can_send_message?
		sent_messages.create! message_attrs
	end 
end

The does not create a message example should now be passing, but the other three  are  failing.  We’re  relying  on  the  subscription  to  determine when messages can be sent, so we’ll need to update @zach to be able to send messages for the failing examples.

Add the following before block to the context for the failing examples:

Download rails_models/rules/10/spec/models/user_spec.rb

context "when the user is under their subscription limit" do
	before(:each) do
	@zach.subscription = Subscription.new
	@zach.subscription.stub(:can_send_message?).and_return true 
end

Run the spec; you should have 4 examples, 0 failures. Right now the two inner  before  blocks  give  @zach  a  Subscription.  Let’s  remove  the  duplication  by  pulling  up  the  subscription  assignment  to  the  outer  before block:

Download rails_models/rules/10/spec/models/user_example1_spec.rb

describe "#send_message" do
	before(:each) do
		@zach = User.create! :subscription => Subscription.new
		@david = User.create!
end

context "when the user is under their subscription limit" do
	before(:each) do
	@zach.subscription.stub(:can_send_message?).and_return true 
end

Run  the  spec  again;  it  should  still  be  green  with  4 examples, 0 failures. This wraps up the User model, given our current needs. Next up: specify the can_send_message?( ) method on the Subscription model.
