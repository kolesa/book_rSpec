12.5  Shared Examples

When  we  expect  instances  of  more  than  one  class  to  behave  in  the same way, we can use a shared example group to describe it once and then include that example group in other example groups. We declare a shared example group with the shared_examples_for( ) method.

shared_examples_for "any pizza" do
	it "tastes really good" do
		@pizza.should taste_really_good
	end

	it "is available by the slice" do
		@pizza.should be_available_by_the_slice
	end 
end

Once  a  shared  example  group  is  declared,  we  can  include  it  in  other example groups with the it_behaves_like( ) method.

describe "New York style thin crust pizza" do
	before(:each) do
		@pizza = Pizza.new(:region => 'New York', :style => 'thin crust')
	end

	it_behaves_like "any pizza"

	it "has a really great sauce" do
		@pizza.should have_a_really_great_sauce
	end 
end

describe "Chicago style stuffed pizza" do
	before(:each) do
		@pizza = Pizza.new(:region => 'Chicago', :style => 'stuffed')
	end

	it_behaves_like "any pizza"

	it "has a ton of cheese" do
		@pizza.should have_a_ton_of_cheese
	end 
end

That produces this:

New York style thin crust pizza 
	has a really great sauce 
	behaves like any pizza 
		tastes really good 
		is available by the slice

Chicago style stuffed pizza 
	has a ton of cheese 
	behaves like any pizza
		tastes really good
		is available by the slice

The it_behaves_like( ) method generates a nested example group named “behaves like” followed by the first argument: “behaves like any pizza.” The block passed to shared_examples_for( ) is then evaluated in the context of that group, so any methods, examples, before hooks, and so on, that are defined in the block are added to the group.

Like any other nested group, the one generated by it_behaves_like( ) inherits the methods and hooks defined in the outer group. In this case, we get the before( ) hooks that define @pizza in each of the groups.

The report shows “behaves like any pizza,” and its examples are nested in each of the top-level groups.

This example also hints at a couple of other features that RSpec brings us to help make the examples as expressive as possible: custom expectation  matchers  and  arbitrary  predicate  matchers.  These  will  be  explained in detail in later chapters, so if you haven’t skipped ahead to read about them yet, consider yourself teased.
