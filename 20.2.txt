20.2  Direct Model Access

Direct  Model  Access  (DMA)  step  definitions  execute  quickly,  but  that speed and isolation comes at a price. They don’t provide much assurance  that  the  application  works,  and  they  are  unlikely  to  catch  bugs beyond those that should be caught by granular RSpec code examples that we’ll be writing in a few chapters.

They  do,  however,  facilitate  conversation  between  the  customer  and developers and will catch regressions if the logic inside the models is broken in the future. In this way, DMA step definitions are useful for exercising fine-grained behaviors of a system, when driving all of them through the full stack would be too cumbersome.
 
To see this in action, let’s look at some scenarios for a movie box office system  we’ll  call  Showtime.  Start  by  bootstrapping  a  Rails  app  as  we did in Section 19.2, Setting Up a Rails 3 Project , on page 286.

The customer wants the structured movie schedule data to be distilled into a human-readable one-line showtime description for display on a website. Create a feature file named showtime_descriptions.feature in the features directory, and add the following text to it:

Download cucumber_rails/01/features/showtime_descriptions.feature

Feature: Showtime Descriptions

	So that I can find movies that fit my schedule
	As a movie goer
	I want to see accurate and concise showtimes

	@wip
	Scenario: Show minutes for times not ending with 00
		Given a movie
		When I set the showtime to "2007-10-10" at "2:15pm"
		Then the showtime description should be "October 10, 2007 (2:15pm)"

	Scenario: Hide minutes for times ending with 00
		Given a movie
		When I set the showtime to "2007-10-10" at "2:00pm"
		Then the showtime description should be "October 10, 2007 (2pm)"

Now run the feature with one of the rake tasks that Cucumber installed when we ran the cucumber:install generator:

rake cucumber:wip

This task runs all the scenarios with the @wip tag. Right now we have just two scenarios and only one tagged with @wip, so that is the only scenario that gets run. You should see that all of the steps are unde- fined  and  that  Cucumber has  provided  code  snippets  for  the  missing step definitions:

1 scenario (1 undefined)
3 steps (3 undefined)
0m0.317s

You can implement step definitions for undefined steps with these snippets: 

Given /^a movie$/ do
	pending # express the regexp above with the code you wish you had 
end

When /^I set the showtime to "([^"]*)" at "([^"]*)"$/ do |arg1, arg2|
	pending # express the regexp above with the code you wish you had
end
 
Then /^the showtime description should be "([^"]*)"$/ do |arg1|
	pending # express the regexp above with the code you wish you had 
end

Getting the First Scenario to Pass

We’ll  implement  the  step  definitions  for  the  first  scenario  using  the Direct Model Access style. Create a file named showtime_steps.rb  in the features/step_definitions  directory,  copy  in  the  snippets  Cucumber  supplied, and modify them as follows:

Download cucumber_rails/02/features/step_definitions/showtime_steps.rb

Given /^a movie$/ do
	@movie = Movie.create!
end

When /^I set the showtime to "([^"]*)" at "([^"]*)"$/ do |date, time|
	@movie.update_attribute(:showtime_date, Date.parse(date))
	@movie.update_attribute(:showtime_time, time)
end

Then /^the showtime description should be "([^"]*)"$/ do |showtime|
	@movie.showtime.should eq(showtime)
end

The step definitions are executed in the context of a Rails environment, so  we  can  use  any  techniques  that  work  in  Rails  unit  tests  or  RSpec model specs, which you’ll read about in Chapter 25, Rails Models, on page  365.  This  includes  creating  models  in  the  database  and  using RSpec’s Expectations API.

The steps are all run in the same object, so the @movie instance variable created in the Given( ) step is available to all subsequent steps.

Now  run  rake  cucumber:wip,  and  you  should  see  the  following  in  the output:

@wip
Scenario: Show minutes for times not ending with 00
	Given a movie
	uninitialized constant Movie (NameError)
	./features/step_definitions/showtime_steps.rb:2:in `/^a movie$/'
	features/showtime_descriptions.feature:9:in `Given a movie'

The first step is failing because it references a Movie object that we have yet to create. Go ahead and create that using the Rails model generator, and then run the migration for the development and test environments.
 


$ script/rails generate model movie showtime_date:date showtime_time:time 
	invoke  active_record
	create  db/migrate/xxxxxxxxxxxxxx_create_movies.rb create  
	app/models/movie.rb
	invoke  rspec
	create  spec/models/movie_spec.rb
$ rake db:migrate
$ rake db:test:prepare

The model generator creates a movie_spec.rb because RSpec registered itself as the test framework when we ran script/rails generate rspec:install.

Now run rake db:migrate and rake cucumber:wip, and you should see that the first and second steps are passing, but we get an undefined method ‘showtime’ for the third step. To get that to pass, go ahead and modify movie.rb as follows:

Download cucumber_rails/04/app/models/movie.rb

class Movie < ActiveRecord::Base

	def showtime
		"#{formatted_date} (#{formatted_time})"
	end

	def formatted_date 
		showtime_date.strftime("%B %d, %Y")
	end

	def formatted_time 
		showtime_time.strftime("%l:%M%p").strip.downcase
	end

end

Now  run  rake cucumber:wip  again,  and  the  output  should  include  the following:

1 scenario (1 passed)
3 steps (3 passed)
0m0.263s

That’s looking much better, isn’t it? This would probably be a good time to commit to a version control system. Working scenario by scenario like this, we get the benefit of ensuring we don’t break previously passing scenarios as we continue to add behavior and refactor.

Joe Asks. . .

 Where  Does  RSpec  Fit  into  Thi s  Picture? 
  
In this example, we go straight from a Cucumber scenario to the Rails model code without any more granular code examples written in RSpec. This is really just to keep things simple and focused on Cucumber for this chapter.

We have yet to introduce you to the other styles of step def- initions  or  the  Rails-specific  RSpec  contexts  provided  by  the rspec-rails  library.  As  you  learn  about  them  in  the  coming chapters,  you’ll  begin  to  get  a  feel  for  how  all  these  puzzle pieces fit together and how to balance the different tools and approaches.

Completing the Feature

Now that we have the first scenario passing, let’s see how we’re doing on the second one. Run both scenarios with rake cucumber (without :wip), and you should see this in the output:

2 scenarios (2 passed)
6 steps (6 passed)
0m0.233s

Now we can go back to our Movie  model and enhance the logic of the formatted_time( ) method.

Download cucumber_rails/05/app/models/movie.rb

def formatted_time
	format_string = showtime_time.min.zero? ? "%l%p" : "%l:%M%p"
	showtime_time.strftime(format_string).strip.downcase
end

That should be enough to get us to green:

2 scenarios (2 passed)
6 steps (6 passed)
0m0.233s

Success! We’ve completed our work on the “Showtime Descriptions” feature. Our passing scenarios tell us that we’ve written the right code and that we’re done. Before we leap into the next chapter, let’s take a second to consider what we learned.
