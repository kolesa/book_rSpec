Chapter 21

Simulating the Browser  with  Webrat  

Even  though  we  call  Rails  an  MVC  framework,  there  are  really  more than  three  layers  in  a  Rails  app.  In  addition  to  the  model,  view,  and controller, we also have a routing layer, a persistence layer (the class methods in Rails models), and a database, and we want to ensure that all of these layers work well together.

In the previous chapter, we introduced Direct Model Access step definitions and used them to implement Givens, Whens, and Thens. This approach  can  be  useful  to  specify  fine-grained  model  behaviors,  but running those scenarios doesn’t give us any confidence that the different layers of our application are working well together.

We  rarely  use  DMA-only  scenarios  in  practice,  and  when  we  do,  it’s to  augment  a  strong  backbone  of  coverage  established  by  Simulated Browser scenarios exercising the full Rails stack. We covered DMA first because it’s the simplest style, but the primary role of DMA step definitions is to help keep our Simulated and Automated Browser scenarios focused  by  quickly  setting  up  repeated  database  state  in  Givens,  as we’ll see later in this chapter.

We  consider  the  Simulated  Browser  style  to  be  the  default  approach for implementing Whens and Thens for a Rails app because it strikes a  good  balance  between  speed  and  integration.  We  can  count  on  the software to work correctly in the hands of our end users when we ship, and we can execute the scenarios quickly as the requirements and code evolve.

If you’re building an application without much JavaScript, the Simulated Browser (combined with DMA for Givens) is likely all you’ll need. It’s a fast, dependable alternative to in-browser testing tools like Selenium and Watir. Even when JavaScript is important to the user experience,  we  like  to  start  with  a  set  of  Simulated  Browser  scenarios  and then  add  Automated  Browser  scenarios  (which  we’ll  cover  in  Chap- ter 22, Automating the Browser with Webrat and Selenium , on page 320) to drive client-side interactions.

If you’ve ever written a Rails integration test, you’ve probably used the Simulated  Browser  style  of  testing.  In  that  context,  methods  such  as get_via_redirect( )  and  post_via_redirect( )  build  confidence  because  they simulate  requests  that  exercise  the  full  stack,  but  they  don’t  make  it easy to express user behaviors clearly. In this chapter, we’ll explore how Webrat builds on this approach to help us bridge the last mile between page  loads  and  form  submissions  and  the  behavior  our  applications provide to the real people whose lives they touch.
