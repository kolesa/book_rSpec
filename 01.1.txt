1.1  Test-Driven Development: Where It All Started

Делавшее пробную поездку Развитие - практика разработчика, которая вовлекает тесты письма прежде, чем написать проверяемый кодекс. Начните при писании мелко очень тест на кодекс, который еще не существует. Управляйте тестом, и, естественно, он терпит неудачу. Теперь напишите только достаточно кодекса, чтобы сделать тот испытательный проход. Нет больше.

Однажды испытательные проходы, наблюдайте получающийся проект, и перефактор любое дублирование, Вы видите (2), что естественно в этом пункте судить, что проект как слишком простой обращается со всеми обязанностями, которые будет иметь этот кодекс.


1.  http://techblog.daveastels.com/2005/07/05/a-new-look-at-test-driven-development/
2.  Refactoring: improving the design of code without changing its 
behavior. From Martin Fowler’s Refactoring [FBB+ 99].

Джо Asks...

 Но Что, Если “Тестеры” Я? 
  

Не у всех проектных команд есть отдельная роль тестера. На командах, которые не делают, действительно не летит понятие отодвижения ответственности тестирования методов другим людям. В случаях как это все еще полезно отделить методы тестирования от TDD.

Когда Вы “носите свою шляпу TDD,” сосредотачиваются red/green/перефактор, лизайне, и документации. Не думайте о тестировании. Как только Вы развили тело кодекса, надели Вашу “шляпу тестера,” и думаете обо всех вещах, которые могли пойти не так, как надо. Это - то, где Вы добавляете все сумасшедшие случаи края, используя исследовательское тестирование, чтобы полоть противные ошибки, скрывающиеся в трещинах и документирующие их, поскольку Вы обнаруживаете их с большим количеством кодовых примеров.

Вместо того, чтобы добавить больше кодекса, зарегистрируйте следующую ответственность в форме следующего теста. Управляйте этим, наблюдайте, что это терпит неудачу, напишите только достаточно кодекса, чтобы заставить это передавать, рассматривать проект, и удалять дублирование. Теперь добавьте следующий тест, наблюдайте, что он терпит неудачу, заставьте его проходить, перефактор, терпеть неудачу, проходить, перефактор, терпеть неудачу, проходить, перефактор, и так далее, и так далее.

Во многих системах тестирования единицы, когда тест терпит неудачу, мы видим результаты, напечатанные в красном. Тогда, когда это проходит, результаты напечатаны в зеленом. Из-за этого мы часто обращаемся к этому циклу как красный/зеленый/перефактор.

Emergent Design

Как кодекс базируют увеличения размера, мы находим, что больше внимания потребляется шагом перефакторинга. Проект постоянно развивается и под постоянным обзором, хотя это не предопределено. Это - проект на стадии становления на гранулированном уровне и является одним из самых существенных побочных продуктов Делавшего пробную поездку Развития.

Вместо того, чтобы думать о TDD как о практике тестирования, мы видим это, поскольку техника имела обыкновение поставлять высококачественный кодекс тестерам, которые ответственны за формальные методы тестирования (см. Джо Asks... на текущей странице). И это - то, где Тест в TDD становится проблемой. Определенно, это - идея единицы, проверяющей, это часто принуждает новый TDDers проверять вещи suchas удостоверяющийся, что регистр () метод хранит Регистрацию в регистрационной коллекции Регистрации и что коллекция - определенно Множество.

Этот вид деталей в тесте создает зависимость в тесте на внутренней структуре проверяемого объекта. Эта зависимость означает, что, если другие требования ведут нас, чтобы изменить Множество на Мешанину, этот тест потерпит неудачу, даже при том, что поведение объекта не изменилось. Эта уязвимость может сделать испытательные наборы намного более дорогими поддержать и является первичной причиной для испытательных наборов, чтобы стать проигнорированной и, в конечном счете, отказанный.

Так, если тестирование внутренностей объекта контрпроизводительно в конечном счете, на чем мы должны сосредоточиться, когда мы пишем эти тесты сначала?