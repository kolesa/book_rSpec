Chapter 14

 RSpec::Mocks  

BDD developers specify what code does, not what it is. We do this from the outside in, starting with Cucumber features to specify how an application should behave when viewed from the outside. We write step definitions that interact with objects that sit at the surface of the app and set  expectations  about  the  responses  they  get  back  from  those  same objects.1

In all but the most trivial applications, these surface-level objects delegate work to other objects below the surface. Those subsurface objects then delegate some or all of the work to other objects, and they to more objects, and so on, and so on.

From a design standpoint, this all makes perfect sense. We all understand the value of separation of concerns and its impact on the maintainability of an application. But this does present a bit of a chickenand-egg problem from a development standpoint. We want to progress in small, verifiable steps, but how can we know that an individual object is  properly  executing  its  role  if  an  object  it  delegates  work  to  doesn’t exist yet?

Enter test doubles.

A test double stands in for a collaborator in an example. If we want the CheckingAccount object to log messages somewhere but we have yet to develop a logger, we can use a double in its place.


1.  You  learned  about  step  definitions  in  Section  4.1,  Steps  and  Step  Definitions,  on page  55,  and  you  can  read  more  about  them  in  Chapter  17,  Intro  to  Cucumber ,  on page 252.

We hear doubles referred to as mocks, stubs, fakes, imposters, or any number of other names depending on how they are used, and there is quite a lot of literature describing different names and patterns and the differences between them. When we boil it all down, however, we end up with just a few underlying concepts:

•  Test doubles

•  Test-specific extensions

•  Method stubs

•  Message expectations

Method stubs and message expectations are method-level concepts that we  can  apply  to  either  test  doubles  or  test-specific  extensions,  which are both object-level concepts. We’ll explore each of these in depth and talk about how and when we use them.
