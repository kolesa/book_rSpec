8.2  One Step at a Time

The refactoring we’re about to engage in has many steps. We’re going to go one step at a time, running the specs between each step to ensure that we’re preserving behavior as we move.

Clarify the Smell

Before  we  can  refactor  away  the  procedural  nature  of  a  method,  it  is sometimes helpful to clarify that nature first. Let’s start by rephrasing the procedure a bit:

•  Count up the exact matches.

•  Count up the number matches.

•  Add a plus sign for each exact match.

•  Add a minus sign for each number match.

We’ll start by clarifying the first step: counting up the exact matches. Make the following modifications to the guess() method:

Download cb/39/lib/codebreaker/game.rb

def guess(guess) exact_match_count = 0 
	mark = ''
	(0..3).each do |index|
		if exact_match?(guess, index)
			exact_match_count += 1
		end 
	end
	(0..3).each do |index|
		if number_match?(guess, index)
			mark << '-'
		end 
	end
	@output.puts '+'*exact_match_count + mark
end

Now  we’ll  introduce  a  new  exact_match_count  variable and  assign  it  a value of 0. We increment its value in the first iterator and then use the * operator on the last line to build a string of n plus signs.

A Circuitous Path

Wait. Didn’t we just identify temporary variables as a code smell? Why yes, we did. Refactoring is not always linear in that some steps seem to  take  us  further  away  from  our  goal  even  when  those  steps  are  in
 
service of our goal. Temporary variables can be a very useful tool in the process of refactoring. . . temporarily. By the time we’re done, we’ll have eliminated them.

Run the specs, and they all should pass. On to the next step. We’ll do the same thing with the number matches:

Download cb/391/lib/codebreaker/game.rb

def guess(guess) 
	exact_match_count = 0 
	number_match_count = 0 (0..3).each 
	do |index|
		if exact_match?(guess, index)
			exact_match_count += 1
		end 
	end
	(0..3).each do |index|
		if number_match?(guess, index)
			number_match_count += 1
		end 
	end
	@output.puts '+'*exact_match_count + '-'*number_match_count
end

Again, we introduce a temp variable, increment its value in the second iterator,  and  then  use  it  to  build  the  string  on  the  last  line.  We  don’t need the mark variable any longer, so we’ve removed it. Run the specs, and they should still pass. On to the next step: extract the calculation of exact_match_count to a separate method.

Extract Method

The  Extract  Method  refactoring  is  a  great  tool  for  improving  a  long method.  The  process  is  quite  simple.  We  create  a  new  empty  method with the name we want to use, move the code from the source method to the target method, and adjust as necessary. Here is the result:

Download cb/392/lib/codebreaker/game.rb

def guess(guess) 
	number_match_count = 0 
	(0..3).each do |index|
		if number_match?(guess, index)
			number_match_count += 1
		end 
	end
	@output.puts '+'*exact_match_count + '-'*number_match_count
end

def exact_match_count 
	exact_match_count = 0 
	(0..3).each do |index|
		if exact_match?(guess, index)
			exact_match_count += 1
		end 
	end
	exact_match_count
end

We  created  a  new  method  named  exact_match_count.  Then  we  moved the declaration of the exact_match_count temp variable to the top of the new method, followed by the first iterator from the guess method. Then we  return  the  value  of  the  temp  variable  at  the  end  of  the  method. The  last  line  of  the  guess()  method  didn’t  change,  but  its  reference  to exact_match_count  now  points  to  the  method  instead  of  a  local,  temp variable.

Run the specs, and you’ll see several failures like this one:

1) Codebreaker::Game #guess with no matches sends a mark with '' 
	Failure/Error: game.guess('5555')
	wrong number of arguments (0 for 1)
	# ./lib/codebreaker/game.rb:30:in `guess'

Run the specs with the --backtrace flag, like this:

rspec spec --backtrace

This  tells  RSpec  to  print  out  a  full  backtrace  for  each  failure.  In  this case, the first two lines are the same in each backtrace, and they point us to the third line of the new exact_match_count() method. There is no guess variable in the scope of the method, so it finds the guess() method on the object, which requires a single argument.

To resolve this error, let’s pass the guess from the guess() method to the exact_match_count() method, like this:

Download cb/393/lib/codebreaker/game.rb

def guess(guess) number_match_count = 0 
	(0..3).each do |index|
		if number_match?(guess, index)
			number_match_count += 1
		end 
	end
	@output.puts '+'*exact_match_count(guess) + '-'*number_match_count
end
 


def exact_match_count(guess) 
	exact_match_count = 0 
	(0..3).each do |index|
		if exact_match?(guess, index)
			exact_match_count += 1
		end 
	end
	exact_match_count
end

Now  the  guess  on  line  3  of  the  exact_match_count()  method  points  to the  argument.  Run  the  specs,  and  they  should  all  pass  again.  As  we discussed in Section 7.3, Learning from Rapid Feedback, on page 94, running  the  specs  between  every  step  provides  rapid  feedback  when there  are  failures  and  makes  it  much  easier  to  isolate  them  than  it would if we learned about the failures later in the process.

Next step!

Let’s do the same thing with number_match_count. We’ll extract a number_match_count() method, this time including the guess in the method definition:

Download cb/394/lib/codebreaker/game.rb

def guess(guess)
	@output.puts '+'*exact_match_count(guess) + '-'*number_match_count(guess)
end

def exact_match_count(guess) 
	exact_match_count = 0 
	(0..3).each do |index|
		if exact_match?(guess, index)
			exact_match_count += 1
		end 
	end
	exact_match_count
end

def number_match_count(guess) 
	number_match_count = 0 
	(0..3).each do |index|
		if number_match?(guess, index)
			number_match_count += 1
		end 
	end
	number_match_count
end

Run the specs, and they should all pass.
 
Watch Out for New Smells

As we’re refactoring, the design is gradually changing before our very noses.  We  need  to  keep  them  open,  constantly  sniffing  for  new  code smells. We’ve cleaned up the guess() method quite a bit, but we’ve also introduced even more duplication between the two new methods.

We can reduce the duplication using Ruby’sinject iterator in each of the new methods.2  Start with the exact_match_count method:

Download cb/40/lib/codebreaker/game.rb

def exact_match_count(guess) 
	(0..3).inject(0) do |count, index|
		count + (exact_match?(guess, index) ? 1 : 0)
	end 
end

If you’re new to Ruby, you might find inject a bit confusing. We’re going to use it in this case because it helps us get rid of our own temp variables by providing one as a block argument.

What happens is that the count variable is initialized with the 0 passed to  inject  and  passed  into  the  block  as  the  first  block  argument.  The second block argument is the next value in the collection we’re iterating on: 0 the first time, 1 the second, and so on.

With each iteration, inject  assigns the return value of the block to the count variable.

And now the same with number_match_count:

Download cb/40/lib/codebreaker/game.rb

def number_match_count(guess) 
	(0..3).inject(0) do |count, index|
		count + (number_match?(guess, index) ? 1 : 0)
	end 
end

Here is the result of all the refactoring we’ve done so far:

Download cb/41/lib/codebreaker/game.rb

def guess(guess)
	@output.puts '+'*exact_match_count(guess) + '-'*number_match_count(guess)
end

2.  See Programming Ruby [TFH05] to learn more about inject( ).

def exact_match_count(guess) 
	(0..3).inject(0) do |count, index|
		count + (exact_match?(guess, index) ? 1 : 0)
	end 
end

def number_match_count(guess) 
	(0..3).inject(0) do |count, index|
		count + (number_match?(guess, index) ? 1 : 0)
	end 
end

def exact_match?(guess, index)
	guess[index] == @secret[index]
end

def number_match?(guess, index)
	@secret.include?(guess[index]) && !exact_match?(guess, index)
end

Isn’t  that  expressive?  And  look  how  much  cleaner  everything  is!  The guess method is no longer procedural, and we’ve reduced all of the temp variables to those provided as block arguments by Ruby’s iterators. All in all, this is a big improvement, but there’s more we can do. Do you see any other code smells?

Large Class

Similar to the Long Method smell, the Large Class smell is not really about  size;  it’s  about  responsibilities.  Our  Game  violates  the  Single Responsibility Principle by taking on multiple concerns: it formats out- put, sends messages to output, and marks each guess. It was violating SRP since we first introduced the guess() method, but that violation and its solution are much more clear now.

We have four methods that all deal with marking a guess. These methods  clearly  belong  together.  We  might  even  be  tempted  to  put  a  comment  above  the  first  one  indicating  that  the  next  four  methods  deal with  marking  the  guess.  This  is  a  strong  hint  that  we’re  missing  an abstraction in our design.

Extract Class

The Extract Class refactoring is the remedy for an SRP violation. The steps are as follows:

1.  Create  an  empty  Marker  class  inside  the  Game  class.  We’ll  move it  out  to  its  own  file  later,  but  it’s  easier  to  do  the  refactoring  if everything is in one file.
 
2.  Add  an  initializer  to  the  Marker  that  accepts  the  secret  code  and assigns it to an instance variable named @secret.

3.  Copy  the  four  calculation  methods  directly  into  the  new  Marker class. Don’t delete the originals yet.

4.  Create a new Marker  in the guess  method, passing the @secret  instance variable to Marker.new.

5.  Call  exact_match_count and  number_match_count on  the  Marker object.

6.  Remove the original copies  of the  four calculation  methods from the Game.
If you follow those steps correctly, the specs should pass between every step, and the end result should look like this:

Download cb/411/lib/codebreaker/game.rb

def guess(guess)
	marker = Marker.new(@secret)
	@output.puts '+'*marker.exact_match_count(guess) +
	'-'*marker.number_match_count(guess)
end

class Marker
	def initialize(secret)
		@secret = secret
	end

	def exact_match_count(guess) 
		(0..3).inject(0) do |count, index|
			count + (exact_match?(guess, index) ? 1 : 0)
		end 
	end

	def number_match_count(guess) 
		(0..3).inject(0) do |count, index|
			count + (number_match?(guess, index) ? 1 : 0)
		end 
	end

	def exact_match?(guess, index)
		guess[index] == @secret[index]
	end

	def number_match?(guess, index)
		@secret.include?(guess[index]) && !exact_match?(guess, index)
	end 
end
 


Now  that  we  have  this  structure,  of  course,  we  can  smell  some  new odors. First, doesn’t it seem odd that we have to pass the guess to the exact_match_count  and number_match_count() methods from the guess() method in the Game?

Also,  notice  how  we  assign  the  secret  to  an  instance  variable  that  we access directly from the instance methods, whereas we’re slinging the guess around from method to method. The fact that they operate at two different  levels  of  abstraction  made  sense  in  the  context  of  the  Game object, but it no longer does in the context of the Marker.

To resolve both of these issues, let’s start by passing the guess to the initializer of the Marker, like this:

Download cb/412/lib/codebreaker/game.rb

def guess(guess)
	marker = Marker.new(@secret, guess)
	@output.puts '+'*marker.exact_match_count(guess) +
	'-'*marker.number_match_count(guess)
end

class Marker
	def initialize(secret, guess)
		@secret, @guess = secret, guess
	end 
end

Now change all the references to guess inside the Marker to point to the @guess instance variable:

Download cb/413/lib/codebreaker/game.rb

def exact_match_count(guess) 
	(0..3).inject(0) do |count, index|
		count + (exact_match?(@guess, index) ? 1 : 0)
	end 
end

def number_match_count(guess) 
	(0..3).inject(0) do |count, index|
		count + (number_match?(@guess, index) ? 1 : 0)
	end 
end

def exact_match?(guess, index)
	@guess[index] == @secret[index]
end

def number_match?(guess, index)
	@secret.include?(@guess[index]) && !exact_match?(@guess, index)
end

Now we can start removing the guess from the signatures of each of the methods. Start with the exact_match_count() method, removing it from the call to that method and the method declaration itself:

Download cb/414/lib/codebreaker/game.rb

def guess(guess)
marker = Marker.new(@secret, guess)
	@output.puts '+'*marker.exact_match_count +
	'-'*marker.number_match_count(guess)
end

class Marker
	def exact_match_count
		(0..3).inject(0) do |count, index|
			count + (exact_match?(@guess, index) ? 1 : 0)
		end 
	end
end

Run  the  specs,  and  they  should  all  pass.  Now  do  the  same  with  the number_match_count, exact_match?, and number_match?  methods, running the specs between each change. They should pass every time. The end result should look like this:

Download cb/415/lib/codebreaker/game.rb

def guess(guess)
	marker = Marker.new(@secret, guess)
	@output.puts '+'*marker.exact_match_count +
	'-'*marker.number_match_count
end

class Marker
	def initialize(secret, guess)
		@secret, @guess = secret, guess
	end

	def exact_match_count
		(0..3).inject(0) do |count, index|
			count + (exact_match?(index) ? 1 : 0)
		end 
	end

	def number_match_count
		(0..3).inject(0) do |count, index|
			count + (number_match?(index) ? 1 : 0)
		end 
	end

	def exact_match?(index)
		@guess[index] == @secret[index]
	end
	 
	def number_match?(index)
		@secret.include?(@guess[index]) && !exact_match?(index)
	end 
end

There!  Now  we  have  good  decoupling  of  concepts  and  good  cohesion within each object. The Marker is responsible only for marking. We kept the plus and minus signs inside the Game, which is currently responsible for all the messages that get sent to output. Had we moved those into  the Marker,  we  would  have  violated  the  DRY  principle  by  having that responsibility represented in two locations.

Now that we have the Marker  in pretty good shape, let’s move it to its own file. Create a marker.rb file in lib/codebreaker/, open the Codebreaker module, and copy the Marker into that file. Don’t forget to remove it from the Game class. Now require that file from lib/codebreaker.rb, like this:

Download cb/42/lib/codebreaker.rb

require 'codebreaker/game'
require 'codebreaker/marker'

Run the specs to make sure everything is still wired up correctly. They should all pass. So should all of the scenarios. Go ahead and run them to make sure everything is still working correctly.