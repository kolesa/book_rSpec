12.2  Pending Examples

In  Test Driven Development: By Example  [Bec02],  Kent  Beck suggests keeping  a  list  of  tests  that  you  have  yet  to  write  for  the  object  you’re working  on,  crossing  items  off  the  list  as  you  get  tests  passing,  and adding new tests to the list as you think of them.

With RSpec, you can do this right in the code by calling the it( ) method with no block. Let’s say that we’re in the middle of describing the behavior of a newspaper:

describe Newspaper do
	it "should be black" do
		Newspaper.new.colors.should include('black')
	end

	it "should be white" do
		Newspaper.new.colors.should include('white')
	end

	it "should be read all over"
	end
 


RSpec will consider the example with no block to be pending. Running these examples produces the following output:

Newspaper
	should be black 
	should be white
	should be read all over (PENDING: Not Yet Implemented)

Pending:
	Newspaper should be read all over
		# Not Yet Implemented
		# ./newspaper_spec.rb:17

Finished in 0.00191 seconds
3 examples, 0 failures, 1 pending

As you add code to existing pending examples and add new ones, each time you run all the examples, RSpec will remind you how many pending examples you have, so you always know how close you are to being done!

Another  case  for  marking  an  example  pending  is  when  you’re  in  the middle of driving out an object, you have some examples passing, and you add a new failing example. You look at the code, see a change you want to make, and realize that the design really doesn’t support what you want to do to make this example pass.

There are a couple of different paths people choose at this juncture. One is to comment out the failing example so you can refactor  in the green and then uncomment the example and continue. This works great until you’re interrupted in the middle of this near the end of the day on Friday, and three months later you look back at that file and find examples you commented out three months ago.

Instead of commenting the example out, you can mark it pending like this:

describe "onion rings" do
	it "should not be mixed with french fries" do
		pending "cleaning out the fryer"
		fryer_with(:onion_rings).should_not include(:french_fry)
	end 
end

In this case, even though the example block gets executed, it stops execution on the line with the pending( ) declaration. The subsequent code is not run, there is no failure, and the example is listed as pending in the output, so it stays on your radar. When you’ve finished refactoring, you can remove the pending declaration to execute the code example as  normal.  This  is,  clearly,  much  better  than  commenting  out  failing examples and having them get lost in the shuffle.

A third way to indicate a pending example can be quite helpful in handling  bug  reports.  Let’s  say  you  get  a  bug  report  and  the  reporter  is kind enough to provide a failing example. Or you create a failing exam- ple yourself to prove the bug exists. You don’t plan to fix it this minute, but  you  want  to  keep  the  code  handy.  Rather  than  commenting  the code, you could use the pending( ) method to keep the failing example from being executed.

You can also, however, wrap the example code in a block and pass that to the pending method, like this:

describe "an empty array" do
	it "should be empty" do
		pending("bug report 18976") do
			[].should be_empty
		end 
	end
end

When RSpec encounters this block, it actually executes the block. If the block fails or raises an error, RSpec proceeds as with any other pending example.

If, however, the code executes without incident, RSpec raises a Pending-ExampleFixedError,  letting  you  know  that  you  have  an  example  that  is pending for no reason:

F

Failures:
1) an empty array should be empty FIXED
	Expected pending 'bug report 18976' to fail. No Error was raised.
		# ./pending_fixed.rb:4

Finished in 0.00088 seconds
1 example, 1 failure

The next step is to remove the pending wrapper and rerun the examples with your formerly pending, newly passing example added to the total of passing examples.

So,  now  you  know  three  ways  to  identify  pending  examples,  each  of which can be helpful in your process in different ways:

•  Add  pending  examples  as  you  think  of  new  examples  that  you want to write.

•  Disable examples without losing track of them (rather than com- menting them out).

•  Wrap failing examples when you want to be notified that changes to the system cause them to pass.

Now that you know how to postpone writing examples, let’s talk about what happens when you actually write some!