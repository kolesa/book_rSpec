21.1  Writing Simulated Browser Step Definitions

We’re going to focus on Cucumber with Webrat and Selenium, so we’re going to skip over some of the low-level details that we use RSpec for in practice. We’ll cover all of that in Chapter 23, Rails Views, on page 331; Chapter 24, Rails Controllers, on page 345; and Chapter 25, Rails Mod- els, on page 365. If you plan to follow along and run the examples, we recommend you download the code examples from http://pragprog.com/ titles/achbd/source_code,  cd  into  the  simulated_browser  directory,  and work in the numbered directories within. That way, you can type the parts we focus on here, but you don’t have to worry about the parts we don’t.

We’ll  be  building  on  the  web-based  movie  box-office  system  from  the previous chapter, so you can, alternatively, continue to use the same code base. If you do, however, you’ll be on your own a couple of times during this chapter. We’ll let you know when we get there, and you can always choose to download the code later.

Now let’s walk through implementing a few step definitions for a simple scenario using the Simulated Browser technique. The next requirement is that administrators should be able to assign a movie to a genre so that  customers  can  later  browse  by  genre.  We  start  by  creating  a  file named  create_movie.feature  in  the  features  directory  with  the  following content:

Download simulated_browser/01/features/create_movie.feature

Feature: Create movie

	So that customers can browse movies by genre
	As a site administrator
	I want to create a movie in a specific genre

	Scenario: Create movie in genre
		Given a genre named Comedy
		When I create a movie Caddyshack in the Comedy genre
		Then Caddyshack should be in the Comedy genre

If  you’re  following  with  the  downloaded  code,  this  is  already  created for  you  in  simulated_browser/01/.  As  usual,  we’ll  begin  by  running  the feature with rake cucumber  to show us the step definitions we need to implement:

You can implement step definitions for undefined steps with these snippets:

Given /^a genre named Comedy$/ do
	pending # express the regexp above with the code you wish you had 
end

When /^I create a movie Caddyshack in the Comedy genre$/ do
	pending # express the regexp above with the code you wish you had 
end

Then /^Caddyshack should be in the Comedy genre$/ do
	pending # express the regexp above with the code you wish you had 
end

The  Given  a  genre  named  Comedy  step  could  be  implemented  using either DMA or the Simulated Browser style. Using a Simulated Browser would ensure that the views and controllers used to create genres are working with the models properly. DMA won’t go through those layers of  the  stack,  but  it  provides  a  bit  more  convenience,  simplicity,  and speed. So, which style should we use?

Choosing Between DMA and Simulated Browser

If we already have scenarios that thoroughly exercise the interface to manage genres using the Simulated Browser style, then we get no ben- efit from exercising those interfaces in this scenario. In that case, we can benefit from the DMA style without reducing our confidence in the application. If not, then we either want to use Simulated Browser here or  want  to  add  separate  scenarios  specifically  for  managing  genre  in which we do.
 
Figure 21.1: Creating a movie with a form



As we add features throughout the evolution of an application, we see a pattern emerge in which we implement DMA Givens for a model that has its own Simulated Browser scenarios elsewhere in the Cucumber suite.

We’ll imagine that those genre scenarios are already in place, but we’re still going to have to create a Genre model and migration. Use the Rails model generator to do that, like this:

script/rails generate model genre name:string rake db:migrate && rake db:test:prepare

Now we add a genre_steps.rb file in features/step_definitions/  with the following code (in simulated_browser/02/ in the code download):

Download simulated_browser/02/features/step_definitions/genre_steps.rb

Given /^a genre named Comedy$/ do
	@comedy = Genre.create!(:name => "Comedy")
end

Run the scenario, and you’ll see this first step pass. All it needed was the Genre  model and table that we just created. Now let’s move on to the When step.

The wireframe for the Add Movie screen, shown in Figure 21.1, shows that a user will need to provide a movie’s title, release year, and genres to add it to the system. Since our When step specifies the main action of the scenario, we’ll use the Simulated Browser to drive this interaction through the full Rails stack.

Before we look at how Webrat can help us with this, let’s see what Rails provides out of the box.

Rails Integration Testing

If  you  were  to  implement  the  When I create a movie Caddyshack in the Comedy genre step with the Rails integration testing API, you might end up with something like the following:

When /^I create a movie Caddyshack in the Comedy genre$/ do
	get_via_redirect movies_path
	assert_select "a[href=?]", new_movie_path, "Add Movie"

	get_via_redirect new_movie_path

	assert_select "form[action=?][method=post]", movies_path do 
		assert_select "input[name=?][type=text]", "movie[title]" 
		assert_select "select[name=?]", "movie[release_year]"
		assert_select "input[name=?][type=checkbox][value=?]", "genres[]", @comedy.id
	end

	post_via_redirect movies_path, :genres => [@comedy.id], :movie => 	{ :title => "Caddyshack", :release_year => "1980" }

	assert_response :success
end

This  gets  the  job  done,  but  a  lot  of  implementation  details  such  as HTTP  methods,  form  input  names,  and  URLs  have  crept  up  into  our step definition. These sorts of details will change through the life span of an application, and that can make scenarios quite brittle. We could mitigate some of that risk by extracting helper methods for specifying forms and posts that might appear in multiple scenarios, but that still leaves a significant issue.

With the generated HTML being specified separately from the post, it is entirely  possible  to  assert_select "input[name=?]", "movie[name]"  and  then post to movies_path, :movie => { :title => "Caddyshack"}. This specifies that the  form  display  an  input  for  movie[name],  but  then  the  step  posts movie[title]. If the form is incorrectly displaying a movie[name] field, this step will pass, but the application will not work correctly.

Webrat

Like the Rails integration testing API, Webrat works like a fast, invisible browser. It builds on that functionality by providing a simple, expressive  DSL  for  manipulating  a  web  application.  We  can  use  Webrat  to describe  the  same  interaction  at  a  high  level,  using  language  that  is similar to how you might explain using the application to a nontechnical friend:

Download simulated_browser/04/features/step_definitions/movie_steps.rb

When /^I create a movie Caddyshack in the Comedy genre$/ do
	visit movies_path 
	click_link "Add Movie"
	fill_in "Title", :with => "Caddyshack" 
	select "1980", :from => "Release 
	Year" check "Comedy"
	click_button "Save"
end

This is obviously more readable than the first version. Webrat lets us focus on exactly the details an end user would experience without concern for how it will be built. The only implementation detail remaining is using the movies_path( ) route as an entry point.

In addition to being more expressive, Webrat also catches regressions without  the  false  positives  described  earlier.  Don’t  worry  about  the details of how this works  just yet. That will become clear throughout the rest of this chapter.

Run  the  scenario  with  Cucumber  again  (from  simulated_browser/04/  in the code download), and it will show us what to implement first:

Scenario: Create movie in genre
	Given a genre named Comedy
	When I create a movie Caddyshack in the Comedy genre 
		undefined local variable or method `movies_path' for
		#<Cucumber::Rails::World:0x81ac9a64> (NameError)
		./features/step_definitions/movie_steps.rb:2:in

We need to make a number of changes and additions to get this first step  passing,  including  new  routes,  controllers,  views,  models,  and migrations.  This  is  all  done  for  you  in  the  simulated_browser/05  direc- tory  of  the  code  download.  If  you  prefer  to  try  it  yourself,  start  with the code in the simulated_browser/04/  directory, run rake cucumber, and follow the failure messages until this step passes.

Once you have this step passing, rake cucumber  tells us that we have one step remaining:

3 scenarios (1 undefined, 2 passed)
9 steps (1 undefined, 8 passed)
0m0.355s

To browse movies by genre, a site visitor would click over to the Comedy page, which displays one movie entitled Caddyshack. The Webrat step definition for our Then reflects this:

Download simulated_browser/06/features/step_definitions/movie_steps.rb

Then /^Caddyshack should be in the Comedy genre$/ do
	visit genres_path click_link "Comedy"
	response.should contain("1 movie")
	response.should contain("Caddyshack")
end

Once again, we’ll learn later how to use RSpec to drive out the routes, controllers,  views,  models,  and  migrations  that  this  Cucumber  step needs to pass. You can either try this on your own, starting with the simulated_browser/05/  directory  in  the  code  download,  or  cd  into  simu- lated_browser/06/  and  it’s  already  done  for  you.  In  either  case,  when you’re finished, run rake features, and everything should pass:

3 scenarios (3 passed)
9 steps (9 passed)
0m0.439s

Great. The passing scenario tells us that we’re done. By leveraging the DMA style for Givens and combining it with the Simulated Browser style with  Webrat  for  Whens  and  Thens,  we’ve  reached  a  good  balance  of expressive specification, speed, and coverage. We can read the scenario to  understand  what  we  should  expect  from  the  application  at  a  high level, and we can be confident that it will work for our users when we ship it.

Throughout the rest of the chapter, we’ll dive into the details of Webrat’s features and how they work. Let’s start by looking at how Webrat lets you navigate from page to page in your application.
