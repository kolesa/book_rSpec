
  Index  


 Sy mb ols 
!=, 174
*, 225, 229
==, 173, 205, 207
===, 173
?, 180, 181
@, 266
#, 258
|, 258, 277 """, 258

 A  
abstractions, 90
isolation in testing, 329
Accept header, 318
acceptance criteria, 44, 50, 52
adding, 45–46 automated, 62, 219 components of, 146 customer -defined, 284
scenarios to define done, 147
tester role, 147
Acceptance Test–Driven Development,
26, 44
Acceptance Test–Driven Planning, 26,
44, 44n, 52 acceptance tests, 44n, 50 access_denied.rb file, 363
AccessDenied error, 362
achievable outcome, 142
ActionController::Integration::Session#host,
323
ActionController::IntegrationTest class, 272
ActionController::TestCase class, 358, 359
ActionController::TestUploadedFile class,
311
actions, triggering, 308
ActionView, 360
ActiveRecord, 291, 335, 386
mock_model, 339
stub chain, 202
test data builders, 385
ActiveRecord::Base class, 339
ActiveRecord::TestCase class, 366
==(actual), 207 adapters, 239 add() method, 211
After hooks, 161, 274, 324 after(:all) method, 160 after(:each) method, 160
after(scope = :each, options={}, &block)
method, 239
AfterStep hooks, 274
Agile, 125–136
Manifesto, 131n
Agile 2006 Conference, 40
Agile methodology, 26
Ajax, 292, 328 ajax.requestCounter, 328 ajax_requests, 328 algorithms, 77, 
84–95
:all scope, 239
analysis phase, programming projects,
127
AND, 266
And() method, 56
and_raise() method, 210
and_return() method, 194, 195, 209
and_throw() method, 210
And keyword, 45, 258 any_args() method, 206 anything() method, 206
APIs, 177, 253
application behavior, 26, 138, 262
application code, 75, 79 application features, 44 application level, 63 
application-code-file, 64
application.rb FILE 
  
  
  BEHAVIOR


application.rb file, 363
application_helper_spec.rb template,
341
ApplicationController class, 361, 363
ApplicationHelper class, 342 arbitrary predicate matchers, 166 argument 
error, 80
argument matchers, 205, 207
ArgumentError, 80
arguments, 271, 273, 276
Around hooks, 161
around(:each) method, 161
around(options={}, &block) method, 239
Array collection, 24 array.empty? method, 180 as_new_record() method, 340
as_null_object() method, 71, 85, 211,
337, 339, 351
Aslak, Hellesoy, 27, 226 assert_difference assertion, 176 assert_equal 
assertion, 172 assert_redirected_to() method, 361 assert_same assertion, 
172 assertions, 151, 170
assign() method, 333 assigns() method, 354 associations, 372
AST, see abstract syntax tree
Astels, Dave, 22, 25
at_exit hook, 122
ATDD, see Acceptance Test-Driven
Development
ATDP, see Acceptance Test-Driven
Planning
attach_file() method, 311
Authentication module, 153
Authentication::User class, 153 autogenerated descriptions, 188 
autogenerated names, 187
Automated Browser style, 291 automated scenarios, 253 automated testing, 
219, 283
automatic example-name generation,
187
Autotest, 224, 230
autotest, 287
autotest directory, 230
autotest command, 230

 B  
Background keyword, 258
Backgrounds, 275
backtrace, 225, 275, 329
--backtrace flag, 100, 228
Bad Request (400–499) HTTP Status
Code, 305
Baker, Steven, 25, 388
Basic authentication mechanism, 318
basic_auth() method, 318
BDD, see Behaviour -Driven
Development
BDUF, see Big Design Up Front
be_ prefix, 180 be_a prefix, 181 be_an prefix, 181
be_close matcher, 175 be_empty() method, 25 be_false matcher, 181 be_true 
matcher, 181 be_valid() method, 385
Before hooks
around hook, 161
Backgrounds, 275 balanced, 358 method types, 158
nested example groups, 166
overview, 274
removing duplication, 352 before() method, 73, 239 before(:all) method, 159 
before(:each) method, 158
before(scope = :each, options={}, &block)
method, 239
before blocks, 73, 188, 202 begin() method, 211 begin/ensure/end structure, 
161 behavior
adding, 62
application level, 290 applications, 25, 26, 28, 30 in BDD, 24
benefit, 146
changing, 72
describing, 63, 139, 151–155
designing, 218
distinguishing from context, 73
documenting, 109 example, 152 expectations, 152 expressing, 299 facet, 152
granular facet, 201


404
BEHAVIOUR -DRIVEN  DEVELOPMENT  (BDD) 
  CODE  
EXAMPLES


granular level, 63 objects, 28, 30, 151 preserving, 98, 119 subset, 152 
unexpected, 183
without changing, 88, 96
wrapping, 239
Behaviour -Driven Development (BDD)
acceptance criteria, 146
benefits, 125–137
coding by example, 143
Cucumber role, 253
cycle, 28
delivery cycle, 141–145
description, 138
easy to automate scenarios, 143
getting started, 37
Given, When, Then triad, 25, 262
integration tests, 147
mechanics, 138
one-to-one mapping, 64 outside-in philosophy, 58 practices, 44
principles, 38, 138–139
role in communication, 24
Ruby on Rails, 283
software methodology, 138–147
testing practice, 111
Big Design Up Front, 38, 111
bin directory, 75, 122
block, 57, 60, 65, 73, 388
Boolean expressions, 181 brittleness, 24, 217 browsers, automating, 320
Buck, Jamis, 373
bug reports, 157
bugs, 23, 97, 112, 392 built-in expectations, 171 built-in formatters, 248
built-in matchers, 172–180
protocol, 240
Bundler, 287
business analysts, 141, 146, 264
business rules, 373
business value, 84, 255, 264
business-facing scenarios, 76
But() method, 56
But keyword, 45, 258
by() method, 176
 C  
4 C’s, 390
caching behavior, 174
method return value, 74
technique, 61
calculation methods, 104
:caller key, 234 can_send_message? method, 381 capture groups, 271, 273
Carrier, Patricia, 27 catch() method, 179 cd command, 32, 33 chaining 
calls, 176 change matcher, 242 changes, 176
check() method, 309 checked? method, 317 choose() method, 309
civil engineering metaphor, 130
clarity, 390
Class object, 152
:class_name option, 372 click_button() method, 312, 325 click_link() 
method, 305, 307, 325 close() method, 249
co-located team, 136
code
changing existing code, 135 code we wish we had, 82 dependencies, 213 
development, 26
expected behavior, 25 external behavior, 72 frequent integration, 135 high 
quality, 23
highly coupled, 220 integrated, 135 internal structure, 72
maintainability, 97, 121 production, 122 prototype, 121 responsibilities, 
22
tests for, 22
well aligned, 213
well-factored, 121 code coverage, 232 code examples
as regression tests, 123 as a safety net, 119 definition, 143

405
CODE  SMELLS  
  
  COST  OF  MAINTENANCE


description methods, 151
executable, 150, 151, 169, 170
expressive, 247
formatting, 175
groups, 150, 158, 164–166 helper methods, 162–164 hooks overview, 158–161 
implementation detail, 217 it() method, 151, 153
less brittle, 175 missing, 112 noise level, 163
organizing, 155, 162, 166
code smells, 96–97
Large Class smell, 103
new, 112
code snippets, 270
code-breaker, 254
Codebreaker module, 59, 64, 65, 107
codebreaker file, 75
codebreaker command, 45
Codebreaker game user stories, 39 codebreaker project root directory, 65
codebreaker.bat script, 75, 111
codebreaker.rb file, 59, 65, 107
Codebreaker::Game class, 59, 65 codebreaker_starts_game scenario, 81 
codebreaker_steps.rb file, 61 codebreaker_submits_guess scenarios, 81 
codebreaker_submits_guess.feature, 115
Codebreaker constant, 59
codebreaker directory, 46, 55, 59, 63,
107, 230
coding by example, 143
coding phase, programming projects,
127
cohesion, 49, 107, 169, 265
cohesive models, 374
Cohn, Mike, 40 collaboration, 114–118 collaborators
immediate, 194 interactions with, 218 nonexistent, 197 nonimplemented, 215
primary and secondary, 196
return values, 208
test double stand in, 191, 204
collections, 182
collisions, avoiding, 222
--color option, 229 command line, tools, 224 command shell, 30, 32, 54
command-and-control cultures, 142 commit() method, 211 communication, 170, 
252, 264, 389 community, Ruby, 395
compatibility, Ruby implementations,
389
compile helpers, 393
complexity adding, 91–93
procedural code, 97 concentric cycles, 62 conceptual cohesion, 169 
conciseness, 189, 390 concurrency, 326, 329 config block argument, 235
Configuration object, 235, 239
Connextra format, 46, 146, 255
consistency, 390
contain() method, 332
contain matcher, 313, 327
:content option, 315
context
acceptance, 257
BDD role of, 25 vs. behavior, 73 controllers, 352 different, 109 groups, 
158 providing, 57
Rails-specific, 296 test doubles, 218 context() method, 153
continuous integration, 135, 227, 266
controlled context, 25
controller() method, 362
ControllerMacros class, 247
controllers, 284, 345
context-specific examples, 352–361
Rails views, 331
specs, 247, 345–352, 358 model interfaces, 365 removing duplication, 356
convenience methods, 204 conversation, 254, 256 core stakeholders, 139 
correctness, 390
cost of maintenance, 126, 133


406
COUNT () METHOD 
  
 DESIGN  
PHASE


count() method, 211
count variable, 102
:count option, 314 counts, 203 coupling, 203, 206
coverage, confidence, 324
create action, 347, 352, 358, 373 create! method, 174 create_messages 
migration, 366
CRUD actions/views, 343
CSS3 selectors, 314, 315
Ctrl+C, 41
Ctrl+Shift+Down, 64
Cucumber, 26–27
application features, 26, 44–52 automating features, 53–62 automating 
scenarios, 143
BDD software methodology, 138 for collaboration, 114–118 configuration, 280
DRY principle, 52
etymology, 27
Given, When, Then triad, 25, 262
installation, 30–31 overview, 252–268 plug-ins, 272
Rails, 290–297
scenario outlines, 49, 77–80
Selenium, 322
tagging feature, 252 cucumber command argument, 56
loading step definitions, 34
output, 56
passing scenarios, 35 running all features, 81 running the scenarios, 116
running without arguments, 81
step definitions, 253
usage, 31
workings of, 261
Cucumber cycle, 28
cucumber features command, 33–35
Cucumber gem, 30
Cucumber scenarios, 76, 83 cucumber-rails plug-in, 272, 273 cucumber.rake 
file, 288 cucumber.yml file, 280, 288
Cucumber::Ast::Table class, 277, 278
cucumber:install generator, 287
CucumberGreeter class, 35
Cuke4Duke project, 269
Cunningham, Ward, 50
@current tag, 265 current_url() method, 317 current_user() method, 341 
custom adapters, 221–222
custom expectation matchers, 166 custom formatters, 247–250 custom macros, 
385
custom matchers, 181, 240–244, 386
custom tasks, 230
customer acceptance tests, 252, 257
customer tests in XP, 44

 D  
database
around hook for transactions, 161
dependency on, 199
database_cleaner gem, 320, 324, 329
DatabaseCleaner.strategy, 325
Date class, 311
Davis, Ryan, 283 debugging, Selenium, 328 declarative scenarios, 263 
declarative steps, 264
decoupling of concepts, 107 default output format, 225 default parameter, 
83
Deliver stakeholder value principle, 139
delivery cycle, 141–145
delivery team, 139, 252
Demyanovich, Craig, 345
Dennis, Zach, 365
dependencies, 213
deployment phase, programming projects, 127
describe() method, 151, 189, 334
RSpec role of, 64, 65 describe block, 65, 390 description() method, 208
:description key, 234 descriptive string, 153 design
evolving, 23, 102, 134
improving, 88
missing an abstraction, 103
naive, 112 practices, 111, 150 in TDD, 23
design phase, programming projects,
127


407
DETAILED  SCENARIOS 
  
  EXAMPLE  GROUPS


detailed scenarios, 254
development environment, 62
development process snapshot, 55
Direct Model Access, 291 directory structure, 33, 62 discover.rb file, 230, 
287 display tables, 50 display_for() method, 342
DMA, see Direct Model Access do_request macros, 247 docstrings, 187, 213 
documentation
consistent, 392
in Cucumber, 27 describe blocks, 169 formatter, 226
new requirements, 115
practices, 150
readable executable, 50
responsibilities, 110
in TDD, 23
TestDox, 226
does_not_match? method, 244
Domain-Driven Design, 44n, 138 domain-specific expectations, 171 
domain-specific language, see DSL Domain-Driven Design (Evans, Eric),
146
Don’t Repeat Yourself principle, see
DRY principle
done, 252, 290
dot, 32, 225, 229
double() method, 192, 194, 201
double object, 74
double-quoted string, 393
DRY principle implementing, 69
Cucumber scenario outlines, 77–83
definition, 49n method stub, 195
nested examples, 167
steps, 273
view specs, 334
violation, 107
DSLs, 30, 181, 244, 259, 291 dump_failures() method, 249 dump_pending() 
method, 249 duplication
checking for, 68
eliminating, 72
introducing, 102
reducing, 50, 102, 212
removing, 22, 88, 195, 272, 351
duration parameter, 249 dynamic test double, 66 dynamic typing, 194

 E  
:each scope, 239
edge cases, 37, 292, 380
else branch, 92
Emacs editor, 230 emergent design, 23 empty() method, 99 empty? method, 180 
empty string, 85
Enough Is Enough principle, 38, 139 env.rb file, 54, 55n, 59, 65, 288, 322 
environment, set up, 30
eql? method, 173
equal matcher, 171, 181 equal(expected) matcher, 171, 172 equal? method, 
173
equality documentation, 173 matchers, 172 operation, 171
RSpec syntax, 391 equals() method, 173 erb templates, 341 error_on() 
method, 385 errors
handling, 361
and logical failures, 62, 67
raising, 210
reports, 229 errors_on() method, 385 events, 45, 147, 167
exact_match?() method, 90 exact_match?() method, 106 exact_match_count() 
method, 98–100,
102, 104, 117
example method, aliases, 187
example object, 249
example groups controller, 247 declaring, 31
describe() method, 151 helper methods, 162 inner group, 166
nested, 85, 153, 154, 159, 166, 227


408
EXAMPLE_COUNT  PARAMETER  
  
  FAILING  EXAMPLES


organizing, 151
outer group, 166 shared, 164, 245 test cases, 151
example_count parameter, 248 example_failed(example) method, 249 
example_group object, 248
:example_group key, 234
example_group_started(example_group)
method, 248 example_passed(example) method, 249 example_pending(example) 
method, 249 example_started(example) method, 249
ExampleGroup class, 166, 341, 366
ExampleGroup object, 64, 152
examples brittle, 220
coding for passing, 68–72, 194
count, 66
coupling to a type, 206
declaring, 31
exact matches, 86 failure count, 66 intent, 196 locations, 66
run count, 32, 66 simplest example, 84 stopping points, 64
Examples keyword, 258, 279n Exception class, 178, 210 exceptions, 62, 83
raising, 210
exclusion filter, 237 executable example, 150 executable scenarios, 254 
execution_result, 249
exemplar, see code examples
ExpectationNotMetError class error, 171,
180, 327
expectations, 60 assertions, 151 blocks, 152 brittle, 174 built-in, 171 
definition, 170
domain-specific, 171 duplication, 187 failure messages, 175 false, 140
floating point calculations, 174
interaction, 150
negative, 204
object state, 181
ordering, 211
post-event state, 172
precision, 186
RubySpecs, 389 self-verifying, 193 setting, 64
state-based, 150 target object, 185 test doubles, 71
Expectations API, 294
expected arguments, 204, 206 expected behavior, 25, 63, 64, 150 expected 
outcomes, 45, 167, 177 expected statement, 175
expected values, 50 explicit receiver, 189 explicit subject, 188
exploratory testing, 111–112 exponential cost curve, 129 expressive tests, 
245
expressiveness, 103, 152, 171, 185,
317
extend(*modules, options={}) method, 238
extensibility, 392
extension modules, 238 extension points, 221, 234 extensions, loading, 228 
external behavior, 72 external dependencies, 329 external systems, 213
Extract Class class, 107
Extract Class refactoring, 103
Extract Method method, 107
Extract Method refactoring, 90, 99
Extreme Programming, 26
Extreme Programming Installed
(Jeffries, Ron), 39, 254

 F  
F (in output), 225, 229
*.feature extension, 261
facet, 151, 152
FactoryGirl, 348, 385
FAILED message in summary, 67 failing code example, 66–67 failing examples
--backtrace, 229
changing to pass, 71, 88
commenting out, 156


409
FAILING  SCENARIOS  
  
 
FORMATTERS


disabling, 119
exact vs. number match, 89
indicators of, 67
marking as pending, 156
failing scenarios, 59, 91, 92, 116, 261
failing step, 28, 59, 69 failure contexts, 357 failure messages
default, 241 matcher.failure_message_for_should, 172 
matcher.failure_message_for_should_not,
172
Mocha, 222
readability, 240
string argument, 192
unexpected, 71n failure modes, 125, 126
failure_count parameter, 249 failure_message_for_should() method, 242 
failure_message_for_should_not() method,
242
failures, 62 context, 94 count, 32
full backtrace, 100
hooks, 275
logical, 81
logical errors, 67 minus signs, 92 numbered, 67 output format, 225
preventing introducing new, 119
previous, 230
rapid feedback, 101 runtime errors, 81 summary line, 229
fake object, 60
Fake pattern, 202
fakes, 60
see also test doubles
false value, 181
feature files, 53
.feature files, 57
feature sets, 140, 265
feature-wise development, 135
Feature keyword, 258, 266
features adding, 94
adding a feature, 77–83 as requirements, 141 automating, 53
definition, 253
delivering, 141
difference with stories, 144
Direct Model Access, 293
DRY principle, 52 expressiveness, 52 organizing, 264 parts, 253 required, 
40 running all, 81 title, 254
see also stories
.features file extension, 53
features directory, 33, 53, 55, 264, 270
feedback
how to use, 114–123 meaningful, 172, 177 rapid, 94, 101, 109 
field_labeled() method, 317 field_named() method, 317 field_with_id() 
method, 317
File object, 248
file systems, 213
fill_in() method, 308, 325
filtering, 234–238
find() method, 197, 200 find_by_name() method, 173 finger charts, 145
Firefox, 320, 323, 328 first iteration, 44, 52, 53 first-person form, 45
FIT, see Framework for Integration Test
Fixjour, 348, 385
FixtureReplacement, 385
fixtures, 366
fixtures directory, 311 flash[:notice], 353 flexibility, 152, 276, 280
:flexmock symbol, 239
floating point calculations, 174–190
flow control, 145
fluent interfaces, 194n
:foreign_key option, 372
form_for() method, 335
--format, 225, 228
--format argument, 250
--format documentation option, 154
--formatter, 228
Formatter API, 248
formatters, 225, 227–228
custom, 247–250

410
FORMS 
  
 HTTP_ACCEPT() 
METHOD


forms, 316–317
4 C’s, 390
Fowler, Martin, 72, 96
fragmentation, 389
Framework for Integration Test, 50
free-form format, 48
free-form narrative, 253
Freeman, Steve, 216
frequent code integration, 135
from() method, 176
:from option, 310
full backtrace, 100
functional specifications, 128, 145

 G  
Game class, 60, 62, 80, 103
Game object, 63, 66, 71, 82, 109
Game responsibilities, 84
@game instance variable, 82
game.rb file, 59, 65, 82
Game.start() method, 80
game_spec.rb file, 63, 72, 91
Gemfile file, 286, 332
generated descriptions, 187–188 generated statement, 175 generated URLs, 
323
GET requests, 305
get() method, 247
get_eval() method, 327, 328
get_via_redirect() method, 299
Gherkin, 253, 256n, 258
Given() method, 34, 50, 56, 57, 270
Given block, see Given method
Given framework element definition, 31
Direct Model Access style, 304, 324
events, 147 example, 199 outer group, 167 steps, 81
Given keyword, 45, 258, 262
see also Given method
Given statement, see Given method
Given, When, Then framework, 25, 62,
115, 147, 196, 262
global hooks, 239
global state, 160
global storage area, 221
Golden Master technique, 175
granular examples, 175
GreaterThanThreeMatcher class, 207
green coding, 58, 68
green dot, 229 greet() method, 31 greeting variable, 31
Grenning, James, 58
Grimm, Avdi, 384
Groovy, step definitions, 269
guards, 392
guess() method, 82, 86–88, 90, 96, 97,
103, 104
@guess instance variable, 105, 120
guess, submitting for Codebreaker game, 46–48

 H  
Hanrigou, Philippe, 325
hard-coded values, 195
has_ prefix, 182
Hash object, 24, 153 hash_including() method, 206 hash_not_including() 
method, 207 hashes() method, 277
Have object, 184 have() method, 184 have matcher, 385
have matcher sequence, 184 have_ prefix, 182 have_exactly() method, 184 
have_selector() method, 314 have_selector matcher, 327
have_xpath matcher, 315, 327
header() method, 318
Hello Cucumber example, 33–36
hello directory, 33
Hello RSpec example, 31–33
Hello World example, 30, 32
--help, 224
help option, 224
helper() method, 342
helper methods, 162–164, 271
helper specs, 342 helpers, 341 heredoc, 393
highly coupled code, 220
hooks, 158–161, 166, 235, 273
global, 239
hooks.rb file, 274
HTML decoded content, 315
HTML formatter, 227, 248
HTML Report, 228f
http_accept() method, 318


411
HTTP_AUTHORIZATION HEADER 
  
 MACKINNON


HTTP_AUTHORIZATION header, 318

 I 
ideal days, 144
idioms, 163
if, elsif, else structure, 94 imperative scenarios, 263 imperative steps, 
263
implementations, 119, 120, 202, 395
implicit subject, 189, 190, 245
@in_browser tag, 265
incidental stakeholders, 139
include(*modules, options={}) method,
238
include(item) matcher, 172
inclusion, 235–237
incremental approach, 94, 97, 121
index action, 362 index cards, 39n infrastructure, 75 initial state, 158
initialize() method, 163, 248, 278
initializers, 104, 163 inject() method, 102 inner circle, 76
inner cycle, 28
inner group, 166
instance variables, 73, 160, 188 instance_of() method, 181, 205 
integrate_views() method, 360n integration testing, 147, 302 intent
embedding, 196 expressing, 89–94, 206 hiding, 203
inter -module call, 58 interactions, 150, 217, 277, 345 interface 
discovery, 216
internal structure, 24
Internet Explorer, 327
IO object, 248
IronRuby, 389
is_ prefix, 328
isolated code examples, 83 isolation issues in testing, 329 it() method, 
64, 65
as alias for example(), 187 delegating should, 189 description, 153 
expressiveness, 152
free text argument, 155
RSpec code example, 25, 31, 119
it_behaves_like() method, 165
It’s all behavior principle, 139
@iteration_12 tag, 265
iteration planning, 44
iteration planning meeting, 52 iterations, 52, 92, 132, 145, 257 iterative 
development, 111 iterators, 97

 J  
Java, 269, 395
JBehave library, 27
JUnit tests, 226
JUnit Recipes (Rainsberger, J.B.), 175

 K  
kanban, 145
Katz, Yehuda, 240n
Keogh, Liz, 255
Koss, Bob, 43

 L  
lambdas, 237
Large Class code smell, 103
Lean manufacturing, 145 length property, 183, 185 let() method, 73, 85, 351 
lib directory, 59, 75, 363 libxml2 library, 327 link_to() method, 306
links, simulating clicking, 305
$LOAD_PATH variable, 64
:location key, 234
locators, 326
logger, 191, 196, 217
logical error, 62
logical failure, 62, 67, 76, 81, 83, 363
login attribute, 374
London XP community, 193
Long Method code smell, 97
long methods definition, 97 improving, 99

 M 
Mabey, Ben, 324
Mac OS X, 319
Machinist, 348, 385
Mackinnon, Tim, 216, 255


412
MACROS  
  
  
 MOCK  OBJECTS


macros, 238, 244–247, 385
maintainability, 121, 126, 191
calling steps, 273
cost of, 133
Manges, Dan, 384
Marick, Brian, 143, 150
mark variable, 92, 97, 99
Marker class, 103, 107, 117
Marker object, 105, 107, 114
Marker.new constructor, 117 marker.rb file, 107, 120 marker_spec.rb file, 
107, 117 marking algorithm
Codebreaker guessing game, 84–95,
109
efficiency of, 77
flaws, 112 implementation, 40, 94 modifying, 116
single method, 123
Marks, Peter, 255
match operation, 207
Matcher DSL, 240
Matcher Protocol, 243
matcher.failure_message_for_should failure message, 172
matcher.failure_message_for_should_not
failure message, 172 matcher.matches? method, 171 matchers, 243, 385
built-in, 240 custom, 181, 240 definition, 171 description, 187
failure messages, 241
matches
all, count, 118
duplicate matches, 114
exact matches, 86, 88, 92, 97
count, 98, 118 new matches, 121 no matches, 86, 88
number matches, 86, 88, 92, 97
count, 118
count implementation, 118
one match, 86
total matches, count, 119
matches? matcher, 243
matches? method, return value, 171 matches?(object) method, 171 
matches?(self) method, 171, 185
Matts, Chris, 255
Matz’s Ruby Implementation, 389
Measurable outcome, 142 memcached, 329 memoization, 61, 74
Message class, 347
Rails models, 366
message expectations, 195–197 in Codebreaker game, 66 creating, 195
Given, Then, What, 196 implementation details, 203 mixing with method 
stubs, 196 ordering, 210
Widget class, 200 message formatters, 247 message routes, 336
@message variable, 333, 354, 369 message_attrs parameter, 377 
message_spec.rb file, 367
message parameter, 60
messages, 60
see also failure messages messages collection, 60 messages empty array, 63 
messages table, 380
messages_controller.rb file, 349
messages_controller_spec.rb file, 346
MessagesController class, 346, 373
Meszaros, Gerard, 193 metadata, 234, 395 metaprogramming model, 197 method 
calls, 55
method chaining, 194
method definitions, 55
method stubs, 196–197, 200, 212
creating, 194
generating, 193–195
method-level concepts, 192 method_missing() method, 182, 184 metrics, 232
migrations, 284
MIME type, application behavior and,
318
minus sign, 87, 91, 92, 97, 107, 117
MissingTemplate error, 335, 355n
:mocha symbol, 239
mock() method, 192, 196, 201, 222
mock models, 334–341
mock objects, 337
see also test doubles

413
MOCK_MODEL() METHOD 
  
 OBJECT -LEVEL  CONCEPTS


mock_model() method, 334–341, 371
mock_with() method, 222, 239
MockExpectationError class, 179
Mock Roles, not Objects (Freeman, Steve et al.), 216
mocks, 60, 201, 239
see also message expectations;
method stubs; test doubles model objects, 201
Model View Controller (MVC), 291
ModelExampleGroup class, 366
models
business rules, 373–382
custom macros, 387
Db, 383–386 exercise, 382–383 generating, 347 matches, 387
Rails views, 331
specs, 365–373
Module object, 152
modules, 164, 235
MRI, see Matz’s Ruby Implementation
MSpec, 394
mspec script, 394
mspec-ci script, 394, 395 mspec-tag script, 394, 395 multiline text, 175, 
276, 279 multiple concerns, 103
MVC (Model View Controller), 291

 N  
.NET library, 389, 395
NameError, 59
names, abstractions, 90
narratives, 44–48, 254
Nathan, Sobo, 27
negative expectations, 204
nested doubles, 219
nested example groups, 85, 159,
166–169, 227 nested scopes, 85 nesting, 315
network, 213, 237, 329 network calls, 203 network_double() method, 204 new 
template, 354
new() method, 351, 365
new operator, 189 new.html.erb template, 335 new.html.erb_spec.rb file, 334
new.js.erb template, 361
new_record? stub, 339
persisted? method, 336
A New Look at Test-Driven Development
(Astels, Dave), 22
“A New Look at Test-Driven
Development” (Astels, Dave), 388
nil value, 181
*nix system, 75
*nix users, 111
--no-helper flag, 346 no_args() method, 206 noise, 163, 212, 215, 228
Nolan, John, 255
nomenclature, 151
NoMethodError class, 180, 183, 185 non-alphanumeric characters, 152 non-GET 
requests, 306
non-numeric characters, 112 nondeterminism, 213 nonfunctional requirements, 
139 nonheader row, 79
North, Dan, 22, 27, 155, 255
NOT, 266
not-a-mock library, 198
Null Object design pattern, 71
NullDb library, 383
NullDB plug-in, 200
number_match?() method, 90, 94, 118 number_match?() method, 106 
number_match_count() method, 101, 102,
104, 117
numbered directories, 55

 O  
Object class, 221
Object object, 271
object
behavior, 24, 151 designing, 218 equivalence, 172 fake, 60
identity, 172 interactions, 24 real, 60
receiving the message, 58 specification, 26 structure, 24, 97
Object Mentor, 43, 58 object-level behavior, 262 object-level concepts, 192

414
OBJECT -ORIENTED  SOFTWARE  
  
  PROJECT


object-oriented software, 216
object-oriented systems, 217
ObjectDaddy, 348, 385
odors, 105
see also code smells Olsen, Rick, 245 onclick, 306
one-to-one mapping, 64
open classes, 171
operator expressions, 186
options, 229, 231
OR, 266
ordered() method, 210
ordered messages, 211
organizational risk perspective, 139
Outcome-Based Planning, 134 outcomes, 142, 147, 308, 313 outer circle, 76
outer cycle, 28
outer group, 166
Output object, 61, 66
output
colorizing, 229, 231 mark variable, 97 summary, 67
output() method, 61, 74 output format, 225 modifying, 234
@output variable, 61
outside-in development, 58, 76

 P  
parallel spec file, 63
parameterized step definitions, 307
parameterizing, 208 partial mocking, 197, 200 partial stubbing, 197
passing code examples, 68–72, 75, 157,
355
passing scenarios, 270 passing specs, 80, 81 passing steps, 56, 57, 81
@passing tag, 265
paths.rb file, 288
Pattern Languages of Program Design 3
(Martin, Robert et al.), 71
PDF formatter, 249
pdf_formatter.rb file, 249
PdfFormatter class, 249
peek() method, 154
PENDING: Not Yet Implemented
message, 65
pending() method, 156, 157
pending examples, 119 colorized output, 229 identifying, 158
it() method for, 155–158
MessagesController, 346 notification of, 67 temporarily pending, 348 
validation specs, 366
pending statement, 119, 121
pending steps, 284
pending wrapper, 157
pending_count parameter, 249
PendingExampleFixedError class, 157
Perl, 388
Perl-ish globals, 388
persistence layer, 298
Phoenix, Evan, 388
placeholders, 279
plain old Ruby objects, see POROs
plain-text format, 44, 52, 53, 248, 269,
290
planning phase, programming projects,
127
plus signs, 92, 97, 107 points of failure, 213 pop() method, 154
POROs, 331, 365 post() method, 359 post-event state, 172
post_via_redirect() method, 299 predicate matchers, 180–181 predicate 
methods, 180 presentation logic, 342 primary collaborator, 196
Proc class, 242
procedural code, 97
process automation, 133, 139
production code, 122, 136
stable, 133
unstable, 126
profiles, Cucumber, 280
Programming Ruby: The Pragmatic Programmer’s Guide (Thomas, Dave with Chad 
Fowler and Andy Hunt), 30n, 102n, 388
progress bar formatter, 225, 227, 248
progressive setup, 167
project


415
PROTOTYPE 
  
  REINFORCING 
 LOOP


failures, 125, 127
inception, 139–141 management, 126 purpose, 139
risks, 131
root, 33, 55
root directory, 75
prototype, 121, 122
Pryce, Nat, 216
pseudo-random sequences, 215
punctuation, 155
push() method, 174
PUT request, 307
put() method, 199
puts() method, 60, 67, 71, 85
puts message, 66
Python, 388

 Q 
query method, stubbing, 219

 R  
race conditions, 326, 329
Rails
BDD cycle, 284
Cucumber, 290–297 helpers, 341 introduction, 283–284
outside-in development, 284–286
running spec files, 225
Selenium, 320–330
see also controllers; models; views; Webrat
Rails 2, 289
Rails 3, 239, 286–288, 346
Rainsberger, J. B., 175 raise() method, 179 raise_error() method, 305
raise_error matcher, 177, 179
raise_error(type) matcher, 172
Rake, 224, 227, 230, 232, 333
rake cucumber command, 288
Rakefile, 224
RSpec::Core::RakeTask class, 231
rake spec command, 287, 288
rake spec:controllers command, 346
RakeTask tool, 231
random generators, 215
.rb file extension, 54
RBehave, 27
RCov, 232
readability, 161, 169, 171, 241, 273
real objects, 60, 197, 201 received_messages() method, 376 recipient_id 
attribute, 366, 370 record() method, 386
records() method, 386
red F, 229
red coding, 28, 58, 67
red/green/refactor cycle, 23, 76
model specs, 383
Rails, 284
refactoring step, 94
role in BDD cycle, 28
redirect_to() method, 361
Redirection (300–399) HTTP Status
Code, 305
redundancy, 355
Refactoring (Fowler, Martin), 72, 96
refactoring
in the green, 72, 156
code smells, 96–97, 107–110 coding with RSpec, 72–75 definition, 72, 96
eliminating duplication, 72, 88–89
example, 68
to express intent, 89–91
Extract Class, 103
Extract Method, 90, 99
in moderation, 110
in the red, 72
incremental approach, 98–107
leaky examples, 369
linearity, 98
new implementation, 121 summary, 112–113 testing, 72, 111–112
Regexp class, 34, 57
Regexp error messages, 178
Regexp object, 79, 207 register() method, 24 registrations collection, 24
Registry, 24
regression tests, 123, 135, 136, 150,
219, 253, 290
regressions, 126, 265, 303, 313, 389
regular expressions
Codebreaker game, 79, 82
Cucumber step definitions, 270, 276
multiline text in RSpec, 175
String arguments, 207
reinforcing loop, 129


416
RELEVANT  OUTCOME 
  
RSPEC::CORE::FORMATTERS::BASEFORMATTER  CLASS


Relevant outcome, 142
reload() method, 313
render() method, 332, 334 render_template() method, 240, 360 render_views() 
method, 360 rendered() method, 332
repeatable sequence, 215 report_to() method, 241, 243 reporting, 234
RequestParameters class, 182
--require, 228
require statements, 75
requirements
batch delivery, 134
expressing, 203
in terms of features, 141 reason, 255 stakeholders, 141 streaming, 134
rescue() method, 179 respond_to(message) matcher, 172 response object, 199
REST API, 318
RESTful, 306
result.should() method, 171
return values, 208
risk-mitigating planning, 129
roles, mock, 216, 220
rolling back code, 121
root directory, 65, 75, 230 routes, implicit, 363 routes.rb file, 336
routing layer, 298
RR library, 198
:rr symbol, 239
RSpec
adding behavior, 62
API, 64
application behavior, 26
Autotest, 224, 230
--backtrace, 100
BDD software methodology, 138
before hooks, 158, 235
built-in expectations, 150, 397–400
code base, 151
command-line tools, 150
configuration, 235
custom formatters, 247–250 custom matchers, 240–244 cycle, 28
describing behavior, 63
Domain-Specific Language, 151
drilling down to, 83
DSL, 30
extending, 150, 234 filtering, 235–238 getting started, 63–64
IDE integration, 150 installation, 30–31 macros, 244–247 outputting 
strings, 66 overview, 25–26 passing example, 32 patterns, 193
pending examples, 119, 155
Rake, 224, 227, 230, 232, 333
RCov, 232
specifying behavior, 150
Story Runner, 27
structures and syntax, 25
TextMate bundle, 64, 224
underlying objects , 76 see also code examples; expectations; mocks
rspec command
--backtrace flag, 100
--color flag, 67 duplications, 187 failure coding, 117
–format doc option, 65
help, 30 options, 224 overview, 25
usage example, 30, 32, 36
rspec gem, 30, 65n
.rspec file, 229, 287
:rspec symbol, 239
RSpec-1, 231, 241
rspec-1.x, 159
rspec-core gem, 224
rspec-rails plug-in
helper specification, 341 macros, 240, 245 matchers, 385
Rails views, 332
Rake, 231
testing of, 283n
rspec-rails plugin
Rails contexts, 296
RSpec::Core::ExampleGroup class, 64, 152
RSpec::Core::Formatters::BaseFormatter
class, 248


417
RSPEC::CORE::RAKETASK  CLASS  
  SER VER  ERROR  (500–599) 
HTTP STATUS  CODE


RSpec::Core::RakeTask class, 231, 232
RSpec::Expectations module, 170
RSpec::Matchers class, 241
RSpec::Matchers::Have constant, 184
RSpec::Matchers::Matcher class, 241
RSpec::Mocks class, 66, 198, 201, 222
RSpec::Mocks::Mock class, 192 rspec:install generator, 287, 333 
rspec_on_rails_on_crack library, 245
RSpecGreeter class, 31, 32
Rubinius, 388, 390, 392, 395
#rubinius IRC channel, 389
Ruby, 30n
class names, 152 code, 269, 393 community, 395 directory layout, 62 dynamic 
typing, 194
implementations, 388, 395 inject() method, 102 interpreter, 58, 171, 185 
introduction, 25
iterators, 103
JBehave port, 27 metaprogramming model, 197 method names, 152
module, 64
recognition by Cucumber, 46, 54
specification, 389
speed, 388
step definitions, 253
versions, 30n
Ruby on Rails, 176, 197, 275, 283
ruby_bug guard, 392
Rubygems, 30n RubySpec, 388–396 run() method, 161 runtime errors, 81

 S  
@secret instance variable, 120
save() method, 197, 340, 350, 353, 354
save_and_open_page() method, 318
Scala, step definitions, 269
scenario outlines, 49–50, 52, 77–80,
115, 278
scenario tables, 50
Scenario keyword, 45, 50, 258, 259, 266
Scenario Outline keyword, 258
scenarios, 26
adding, 48–49
artificial structure, 147
as integration tests, 147
automating, 143
BDD, 146 customizing, 280 declarations, 27, 49 expressiveness, 52 failed, 
35
getting to pass, 34 grouping, 50 implementing, 298 life cycle, 265 
maintainability, 317 missing, 112 passing, 84, 88
plain text, 27 relationships, 278 repetitive, 50
Ruby, 27
Selenium, 328 separate scenarios, 81 steps, 26, 27
styles, 263
tables, 78, 81
undefined, 34, 79, 80
Scenarios keyword, 258, 279
schema.rb file, 384
scope, 160, 239, 316
secondary collaborator, 196
@secret instance variable, 104 select() method, 309 select_date() method, 
310 select_datetime() method, 310 select_time() method, 310
Selenium, 291, 299, 320–330 selenium() method, 325 selenium-client API, 325
selenium.browserbot.getCurrentWindow()
method, 327
Selenium::Client::Driver class, 325
selenium_client gem, 320
self-documenting code, 91
self-verifying expectations, 193 semantic nuances, 390 send_message() 
method, 375, 376 sender_id field, 378
sent_messages() method, 378
Sequel library, 239
sequences, 215
Server Error (500–599) HTTP Status
Code, 305


418
SER VER  ERRORS 
  
  STEP  
DEFINITIONS


server errors, 329
servers, 213 service packs, 126 session hash, 359
set_hidden_field() method, 311 set_status() method, 163 
setup_mocks_for_rspec() method, 221 shared examples, 162, 164–166, 245
shared_examples_for() method, 164, 165
shortcuts, 201
should expectation, 170
should tool, 155
should() method, 171, 172, 185, 189,
242
should== method, 173, 174 should=== method, 173 should_assign() method, 247
should_not() method, 171, 172, 189,
241, 242
should_not== method, 174 should_not_receive() method, 204 should_receive() 
method, 195, 203, 208 shoulda library, 245
should eql() method, 173 shouldequal() method, 173 show.html.erb template, 
333 simplest example, 84–88
Simulated Browser style, 291, 298,
300, 311
single iterator, breaking into two, 94
Single Responsibility Principle (SRP),
97, 103, 373
size property, 183, 185
“Skinny Controller, Fat Model” (Buck, Jamis), 373
Smalltalk, 25
SMAR T outcomes, 140, 142 smells, see code smells snapshots, 55
software
delivery challenges and successes,
125–126, 130–136
design, 134
development of, 126, 127 internal structure, 96 understandability, 96 
some_helper() method, 271
source() method, 99
spec directory, 225, 231, 287
spec task, 231
spec files, 224, 225
loading extensions, 228
see also specs spec-file, 64
_spec.rb suffix, 225, 334, 358, 372
Spec::Matchers class, 241n Spec::Rake::SpecTask class, 231n spec_helper.rb 
file, 64, 65, 287, 334,
358, 372, 385
spec_opts() method, 232 spec directory, 33, 63, 65 specdoc format, 232
Specific outcome, 142 specifications, 155, 218 specify() method, 187 specs
benefits, 119
churn and confusion, 395 code coverage, 232 communication, 390 connecting 
to the code, 65–66 declarative nature, 393 definition, 150
flexibility, 217 less brittle, 217 metadata, 395 passing, 86 statistical, 
215
updating after refactoring, 107–110
see also spec files SpecTask class, 231 speculative code, 87
speed, 300, 304, 324, 384
SRP, see Single Responsibility Principle stable sequences, 215
stack example, 158
stack-based instruction set, 393
stakeholders, 138–141, 252
feedback, 145
language, 146
working scenarios, 143 start() method, 59, 80, 81, 85 start message, 67
start(example_count) method, 248
start_dump() method, 249
state, sharing, 159, 167
state-based expectations, 150
STDOUT, 60, 66, 248, 250
step definitions, 269–271
arguments, 271
Backgrounds, 275
block, 34


419
step_definitions DIRECTOR Y 
  
  TEST  DOUBLES


calling steps, 272
code snippets, 270 decoupling, 309 definition, 34 example, 60
helper methods, 271 implementing, 299 invocation, 27 methods, 55–60
model interfaces, 365 multiline text, 276, 277 overlap with view specs, 343 
overview, 253
reusable, 307
scenario outlines, 79–80
Selenium, 324
Simulated Browser style, 299
storing, 34
styles, 290–292
Webrat API, 320
step_definitions directory, 34, 55, 270,
288
steps, 34, 55, 260
calling within step definitions,
272–273, 273 skipped, 35 undefined, 34
Stevenson, Chris, 226
stories, 141–147
Stories In, Features Out arrangement,
144
storing() method, 24
streaming requirements, 134, 136
String arguments, 271
String object, 153, 155, 207
string variables, 120
Strings, 152, 178, 183 structural discrepancies, 81 structural error, 83
stub() method, 192, 194–196, 201, 202,
222
stub chains, 202
stub_chain() method, 203 stub_model() method, 340, 341 stubbed 
dependencies, 214 subject, 188–190
subject() method, 188 subject code, 150, 152 submit_form() method, 312
Subscription class, 381
success contexts, 357
success path examples, 352
Successful (200–299) HTTP Status
Code, 305
sudo command, 30, 31
:suite scope, 239
summary line, 229
supply chain example, 140
support directory, 55n, 288
Symbol object, 179, 239, 241
symbols, 155, 210
syntactic sugar, 180, 183, 272
pure, 183
systemic faults, 134
systems thinking terminology, 129

 T  
--tags argument, 266
tables in steps, 79, 81, 277
tabular data, 49–52
tagged hooks, 274
tags, 265–267, 280, 394
target() method, 99
target object, 185
TDD (Test-Driven Development), 22–24,
44n
design and documentation, 150
teardown_mocks_for_rspec() method, 221
Tempfile object, 311
Temporary Variable code smell, 97
Temporary Variables, 97, 99, 102, 103
test data builders, 348, 384
test doubles
advantages in code, 70
in automated Cucumber features,
60–62
built-in support, 220
choosing other frameworks, 220–222
creating, 192, 194
custom adapters, 221–222
definition, 192
dynamic, 66
method stubs, 193–196
nomenclature, 193
one-at-a-time rule, 222
risks and trade-offs, 218–220
as stand-ins, 203
test-specific extensions, 193,
197–201
views, 334
when to use, 213–218
see also message expectations


420
TEST  FILES 
  
  
  USERS


test files, Autotest, 230
test methods, 151
Test Spy pattern, 198
test stubs, see test doubles test suites, 24
Test-Driven Design, traditional, 194
Test-Driven Development, see TDD
test-specific extensions, 193, 197–201
when to use, 213–218
test.log file, 318
Test::Unit class, 64, 151, 176, 220
TestCase class, 64
TestDox, 226
Test Driven Development: By Example
(Beck, Kent), 155
tester role, 147 testers, 23–25 testing
list, 155 overview, 22 practices, 111
Rails, 283
Simulated Browser style, 299
types, 267
testing phase, programming projects,
127
test-specific subclass pattern, 197
TestUploadedFile class, 311 text() method, 334, 338 text attribute, 366 
text/plain MIME type, 311 text_field() method, 337
TextMate, 224, 229, 248
themes, 140, 265
Then
steps, 83
Then() method, 34, 50, 56, 60
Then block, see Then method
Then framework element passing, 68
definition, 31
implementing, 298
Simulated Browser Style, 304
specifying outcomes, 327
Then keyword, 45, 258, 262
see also Then method
Then statement, see Then method ThoughtWorks, 226, 255, 320 throughput, 
132, 142, 145
throw() method, 179
throw/catch, 179
throw_symbol matcher, 179
ticket number, 392
tight coupling, 195
Time class, 311
Timeboxed outcome, 142 title attribute, 366, 368 tmp directory, 319
to() method, 176 to_i() method, 328 to_param stub, 339
to_s() method, 174, 241 top-level groups, 166 traceability, 140
traditional projects, 125–130
traditional top-down decomposition,
140
transaction() method, 161 transactional fixtures, 324 transactions, turning 
off, 323
Treetop library, 27 triangulation, 194 true value, 181
TRUNCATE TABLE, 325
:truncation, 325 truthy, 357n try/catch, 179

 U  
ubiquitous language, 146
uncheck() method, 309 uninitialized constant, 59 uninitialized constant 
message, 347 unit testing, 23
UnitRecord library, 383
up-front approach, 139 update_attributes() method, 340 
use_transactional_fixtures, 322
User class, 374, 381
User example, 153 user interfaces, 331 user stories, 253, 254
as a planning tool, 43
characteristics, 43
commercial distribution, 41–42
context, 42
as conversation token, 39–41
generating, 39 properties, 254 selecting, 52
user_spec.rb file, 380
users, 277


421
USERS _URL() METHOD 
  
  ZERODIVISIONERROR  CLASS


role, 255
users_url() method, 323
User Stories Applied (Cohn, Mike), 40,
255
utilities, 203, 234, 278

 V  
valid? method, 386
validation rules, 199 validations, specifying, 366 variable data 
placeholders, 49 velocity, 132
verbosity, 337 verify_mocks_for_rspec() method, 221 version string, 392
view logic, 341
view matchers, 313
view specs
directory structure, 334
helpers, 341–342
mock models, 334–341 naming conventions, 334 summary, 343
writing, 331–334
view templates, 360
Vim editor, 230
visibility, 274
visit() method, 305

 W 
wait_for() method, 326
Walnes, Joe, 216
Watir, 299
web_steps.rb file, 288, 307, 314
Webrat, 343
API, 291
DOM, 330
forms, 307–313, 317
functional testing, 283
HTTP, 317
introduction, 298–299
page navigation, 304–307
RSpec matchers, 313–316
scope, 316
Selenium, 320–330
step definitions, 299–304
summary, 319
timeouts, 330 troubleshooting, 318–319 view specs, 343
Webrat library, 272
Webrat::NotFoundError error, 316, 318
Webrat::PageLoadError error, 305
Webrat::SeleniumSession class, 326
well-factored code, 121
When() method, 34, 50, 56–59, 81
When block, see When method
When framework element, 31, 298,
304, 325
When keyword, 45, 258, 262
see also When method
When statement, see When method
Widget class, 199, 200
WidgetsController class, 200
@wip tag, 265
wip: prefix, 280
with() method, 204, 206
within() method, 316
World() method, 271
World object, 271
world.rb file, 271
wrappers, rspec-flavored, 199

 X  
xml_http_request() method, 359
XPath, 315, 327
xUnit, 64, 172
XUnit Test Patterns (Meszaros, Gerard),
193

 Y  
YARV mailing list, 388
yellow asterisk, 229
yield self, 163

 Z  
ZenTest, 283
ZeroDivisionError class, 177

