14.2  Method Stubs

A method stub  is a method that we can program to return predefined responses during the execution of a code example. Consider the following:

Line 1  describe Statement do
2 	 it "uses the customer's name in the header" do
3 		 customer = double('customer')
4 		 customer.stub(:name).and_return('Aslak')
5 		 statement = Statement.new(customer)
6 		 statement.generate.should =~ /^Statement for Aslak/
7 	 end
8  end

This  example  specifies  that  a  statement  uses  its  customer’s  name  to generate  part  of  the  statement.  The  customer  double  stands  in  for  a real Customer. Thanks to Ruby’s dynamic typing, the customer can be of any class, as long as it responds to the right methods.

We  create  a  test  double  using  the  double( )  method  on  line  3.  On  line 4, we create a method stub using the stub( ) method. It takes a single argument: a symbol representing the name of the method that we want to stub. We follow that with a call to and_return( ), which tells the double to return ’Aslak’ in response to the name( ) message.(2)

Here is a simple implementation that will pass this example:

Line 1  class Statement
2 	 def initialize(customer)
3		  @customer = customer
4 	 end
5
6	  def generate
7 		 "Statement for #{@customer.name}"
8 	 end
9  end

When the example is executed, the code on line 6 in the example sends the  generate( )  message  to  the  Statement  object.  This  is  the  object  in development and is a real Statement.

When the Statement  executes the generate( ) method, it asks the @customer  for its name( ). The customer is not the focus of this example. It is  an  immediate  collaborator  of  the  Statement,  and  we’re  using  a  test double to stand in for a real Customer in order to control the data in the example. We programmed it to return ’Aslak’, so the result is “Statement for Aslak,” and the example passes.

Of course, we could also implement the generate( ) method like this:

Line 1  def generate
2 			"Statement for Aslak"
3 		end

That  is,  after  all,  the  simplest  thing  we  could  do  to  get  the  example to  pass.  This  is  what  traditional  TDD  instructs  us  to  do  first.  What  it instructs us to do next varies from practitioner to practitioner. One approach is to triangulate, in other words, add another example that uses  a  different  value,  forcing  the  implementation  to  generalize  the value in order to pass both examples.


2.  This sort of method chaining is called a fluent interface  and is quite common in all of Ruby’s most common test double frameworks. In fact, earlier versions of RSpec used fluent interfaces to set expectations like result.should.equal(4).

Another approach is to view the ’Aslak’ in the implementation as duplication with the ’Aslak’ in the example. Following the DRY principle, we remove that duplication by generalizing the implementation.

Neither  of  these  approaches  is  ideal.  Triangulation  requires  an  extra example that specifies the same essential behavior. DRY is certainly a worthy justification, but it requires that we take that extra step. Experience shows that this approach will periodically result in hard-coded values  remaining  in  implementation  code.  There  is,  however,  a  third option!
