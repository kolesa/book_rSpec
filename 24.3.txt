24.3  Specifying ApplicationController

We  typically  specify  controller  behavior  directly  through  controller actions,  but  sometimes  we  want  behavior  applied  to  every  controller and invoked indirectly. Perhaps we want to log every incoming request or  add  application-wide  error  handling.  We  don’t  want  to  specify  this over and over again on every action, so let’s explore a technique that allows us to specify these sorts of behaviors just once.

AccessDenied!

Let’s add uniform error handling for AccessDenied exceptions. We’ll start by creating spec/controllers/application_controller_spec.rb  with the following content:

Download rails_controllers/messages/25/spec/controllers/application_controller_spec.rb

require 'spec_helper'

describe ApplicationController do
	describe "handling AccessDenied exceptions" do
		it "redirects to the /401.html (access denied) page" do
			get :index
			response.should redirect_to('/401.html')
		end 
	end
end

This should fail with the following:

Failure/Error: get :index
No route matches {:controller=>"application"}

In most controller specs, we write examples for controllers used directly in  the  app.  Here  we  specify  behavior  of  every  controller’s  
superclass, ApplicationController, which isn’t exposed to the app.

controller  DSL

To help us out with this situation, RSpec provides a simple DSL for creating an anonymous subclass of ApplicationController right in a spec. We need an index action, so we’ll add that to the controller, programming it to raise the AccessDenied error that we’re expecting in the example.

Download rails_controllers/messages/26/spec/controllers/application_controller_spec.rb

require 'spec_helper'

describe ApplicationController do
	controller do 
		def index
			raise AccessDenied
		end 
	end

	describe "handling AccessDenied exceptions" do
		it "redirects to the /401.html (access denied) page" do
			get :index
			response.should redirect_to('/401.html')
		end 
	end
end

The  controller( )  method  also  defines  implicit  routes  for  the  controller so you don’t have to set those up either. Now run the specs, and you should see this:

uninitialized constant AccessDenied

We  can  get  past  this  by  defining  an  AccessDenied  exception.  Create  a file named lib/access_denied.rb with this content:

Download rails_controllers/messages/27/lib/access_denied.rb

class AccessDenied < StandardError
end

Now add this line to config/application.rb:

Download rails_controllers/messages/27/config/application.rb

config.autoload_paths += %W( #{config.root}/lib )

This tells Rails to autoload classes defined in files in the lib directory. Now  the  spec  fails  with  AccessDenied,  which  is  the  logical  failure  we want. All that’s left to do is to rescue from the AccessDenied error and redirect to “/401.html” in ApplicationController:

Download rails_controllers/messages/28/app/controllers/application_controller.rb

class ApplicationController < ActionController::Base 
	rescue_from AccessDenied, :with => :access_denied
	protected

	def access_denied 
		redirect_to "/401.html"
	end

end

Success! We now have 1 example, 0 failures.

