13.7  Generated Descriptions

Sometimes  we  end  up  with  an  example  docstring  that  is  nearly  an exact duplication of the expectation expressed in the example. Here’s an example:

describe "A new chess board" do
	before(:each) do
		@board = Chess::Board.new
	end

	it "should have 32 pieces" do
		@board.should have(32).pieces
	end 
end

When we run this with the rspec command, the output looks like this:

A new chess board
	should have 32 pieces

In this case, we can rely on RSpec’s automatic example-name generation to produce the name you’re looking for:

describe "A new chess board" do
	before(:each) { @board = Chess::Board.new }
	specify { @board.should have(32).pieces }
end

This produces the same output we saw earlier:

A new chess board
	should have 32 pieces

This  example  uses  the  specify( )  method  instead  of  it( )  because  specify is more readable when there is no docstring. Both it( ) and specify( ) are actually aliases of the example( ) method, which creates an example.

Each of RSpec’s matchers generates a description of itself, which gets passed on to the example. If the example  (or it  or specify) method does not  receive  a  docstring,  it  uses  the  last  of  these  descriptions  that  it receives. In this example, there is only one: “should have 32 pieces.”

It  turns  out  that  it  is  somewhat  rare  that  the  autogenerated  names express  exactly  what  you  would  want  to  express  in  the  descriptive string passed to example. Our advice is to always start by writing exactly what you want to say and only resort to using the generated descrip- tions when you actually see that the string and the expectation line up precisely.

Here’s  an  example  in  which  it  might  be  clearer  to  leave  the  string  in place:

it "should be eligible to vote at the age of 18" do
	@voter.birthdate = 18.years.ago
	@voter.should be_eligible_to_vote 
end

Even though the autogenerated description would read “should be eligible to vote,” the fact that he is eighteen today is very important to the requirement being expressed. On the other hand, consider this example:

describe RSpecUser do 
	before(:each) do
		@rspec_user = RSpecUser.new 
	end
	it "should be happy" do
		@rspec_user.should be_happy 
	end
end

This  expectation  would  produce  a  string  identical  to  the  one  that  is being passed to it, so this is a good candidate for taking advantage of autogenerated descriptions.

