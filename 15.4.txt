15.4  Rake

Rake is a great automation tool for Ruby, and RSpec ships with custom tasks  that  let  you  use  RSpec  from  Rake.  You  can  use  this  to  define one or several ways of running your examples. For example, rspec-rails ships with several different tasks:

rake spec             # Run all specs in spec directory
rake spec:controllers # Run the code examples in spec/controllers rake spec:helpers     # Run the code examples in spec/helpers
rake spec:models      # Run the code examples in spec/models rake 
spec:requests         # Run the code examples in spec/requests rake spec:routing     # Run the code examples in spec/routing
rake spec:views       # Run the code examples in spec/views

This is only a partial list. To see the full list, cd into the root directory of any Rails project you have using RSpec, and type rake -T spec. All of these tasks are defined using the RSpec::Core::RakeTask.

RSpec::Core::RakeTask

The RSpec::Core::RakeTask  class can be used in your Rakefile  to define a task that lets you run your specs using Rake.1  The simplest way to use it is to put the following code in your Rakefile:

require 'rspec/core/rake_task'

RSpec::Core::RakeTask.new

This creates a task named spec that runs all the specs in the spec directory (relative to the directory Rake is run from—typically the directory where  Rakefile  lives).  To  run  the  task  from  a  command  window, just type this:

rake spec

Simple, no? And that’s only the beginning. The RakeTask exposes a collection of useful configuration options that let you customize the way the command runs.

To begin with, you can declare any of the command-line options. If you want to have the SpecTask  colorize the output, for example, you would do this:

RSpec::Core::RakeTask.new do |t|
	t.rspec_opts = ["--color"]
end


1.  Spec::Rake::SpecTask in RSpec-1.

 About  Code  Coverage 

Code coverage is a very useful metric, but be careful, because it can be misleading. It is possible to have a suite of specs that execute  100  percent  of  your  code  base  without  ever  setting any expectations. Without expectations, you’ll know that the code will probably run, but you won’t have any way of knowing whether it behaves the way you expect it to behave.

So, although low code coverage is a clear indicator that your specs  need  some  work,  high  coverage  does  not  necessarily indicate that everything is hunky-dory.

spec_opts takes an array of strings, so if you also wanted to format the output with the specdoc format, you could do this:

RSpec::Core::RakeTask.new do |t|
t.rspec_opts = ["--color", "--format", "specdoc"]
end

Check RDoc for RSpec::Core::RakeTask to see the full list of configuration options.
